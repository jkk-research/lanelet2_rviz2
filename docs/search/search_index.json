{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>lanelet2_rviz2</code> ROS2 package - OSMVisualizer","text":"<p>OSMVisualizer is a ROS 2 node for visualizing OpenStreetMap (OSM) data in RViz2. It processes <code>.osm</code> files specified via launch parameters and publishes markers for map elements, such as nodes, ways, and relations.</p> <p> </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Static File Loading: Reads the <code>.osm</code> filename from a launch file parameter (<code>osm_filename</code>).</li> <li>Advanced Visualization in RViz2:</li> <li>Displays map relations as colored line strips:<ul> <li>Left ways are shown in lime.</li> <li>Right ways are shown in red.</li> </ul> </li> <li>Relation areas are filled using polygon triangulation.</li> <li>Speed limits are visualized with a gradient color scale:<ul> <li>Green for lower speeds.</li> <li>Blue for medium speeds.</li> <li>Red for higher speeds.</li> </ul> </li> <li>One-way relations are marked with dynamically positioned direction arrows.</li> <li>Dynamic Parameter Reconfiguration: Modify visualization settings like <code>line_width</code>, <code>frame_id</code>, or <code>speed_color_max</code> during runtime without restarting the node.</li> <li>Reusable Data Structures: Efficiently processes nodes, ways, and relations.</li> </ul>"},{"location":"#topics","title":"Topics","text":""},{"location":"#published","title":"Published","text":"<ul> <li><code>/osm_relations</code> (visualization_msgs/msg/MarkerArray):   Marker array for relations (left and right ways).</li> <li><code>/osm_speed</code> (visualization_msgs/msg/MarkerArray):   Marker array for relation areas, visualized with speed gradient colors.</li> <li><code>/osm_one_way_arrows</code> (visualization_msgs/msg/MarkerArray):   Marker array for one-way direction arrows.</li> </ul>"},{"location":"#parameters","title":"Parameters","text":""},{"location":"#node-parameters","title":"Node Parameters","text":"<ul> <li><code>osm_filename</code> (string): Path to the <code>.osm</code> file to process.</li> <li><code>frame_id</code> (string): The coordinate frame for visualization markers (default: <code>\"map_gyor_0\"</code>).</li> <li><code>line_width</code> (double): Width of the visualization lines (default: <code>0.8</code>).</li> <li><code>center_map</code> (bool): Center the map in RViz2 (default: <code>false</code>).</li> <li><code>speed_color_max</code> (double): Maximum speed limit for gradient visualization (default: <code>90.0</code>).</li> </ul>"},{"location":"#usage","title":"Usage","text":""},{"location":"#1-build-the-project","title":"1. Build the Project","text":"<p>Make sure your ROS 2 workspace is set up. Clone this repository into the <code>src</code> directory and build it:</p> <pre><code>cd ~/ros2_ws/src &amp;&amp; git clone https://github.com/jkk-research/lanelet2_rviz2\n</code></pre> <pre><code>cd ~/ros2_ws &amp;&amp; colcon build --packages-select lanelet2_rviz2 --symlink-install\n</code></pre> <pre><code>source ~/ros2_ws/install/setup.bash\n</code></pre>"},{"location":"#2-run-the-node","title":"2. Run the Node","text":"<p>Launch the <code>OSMVisualizer</code> node with a launch file specifying the <code>.osm</code> filename:</p> <pre><code>ros2 launch lanelet2_rviz2 visualize_osm.launch.py\n</code></pre> <pre><code>ros2 run lanelet2_rviz2 visualize_osm --ros-args -p osm_filename:=/mnt/c/map/lanelet.osm -p frame_id:=map\n</code></pre>"},{"location":"#3-visualize-in-rviz2","title":"3. Visualize in RViz2","text":"<ul> <li>Open RViz2:   <pre><code>rviz2\n</code></pre></li> <li>Add a <code>MarkerArray</code> display.</li> <li>Set the topics to:</li> <li><code>/osm_relations</code> for line strips representing left and right ways.</li> <li><code>/osm_speed</code> for filled relation areas with speed gradient.</li> <li><code>/osm_one_way_arrows</code> for direction arrows.</li> </ul>"},{"location":"#4-dynamic-parameter-updates","title":"4. Dynamic Parameter Updates","text":"<p>Update visualization parameters during runtime using the <code>ros2 param set</code> command. Example:</p> <pre><code>ros2 param set /osm_visualizer line_width 1.5\n</code></pre> <p>Or with <code>rqt_reconfigure</code>:</p> <pre><code>ros2 run rqt_reconfigure rqt_reconfigure\n</code></pre>"},{"location":"#usage-with-pointcloud","title":"Usage with Pointcloud","text":""},{"location":"#option-1-pcl_ros","title":"Option 1. - <code>pcl_ros</code>","text":"<pre><code>sudo apt install ros-$ROS_DISTRO-pcl-ros\n</code></pre> <pre><code>ros2 run pcl_ros pcd_to_pointcloud --ros-args -p file_name:=/home/he/dlio_map2.pcd -p tf_frame:=map_gyor_0 -p publishing_period_ms:=500 --qos-reliability best_effort\n</code></pre>"},{"location":"#option-2-pcd_publisher","title":"Option 2. - <code>pcd_publisher</code>","text":"<p>github.com/jkk-research/pcd_publisher</p> <pre><code>ros2 run pcd_publisher pcd_publisher --ros-args -p pcd_file_path:=/home/dev/autoware_map/gyor_campus/pointcloud_map.pcd -p topic_name:=/points_campus -p frame_id:=map_gyor_0\n</code></pre>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<ul> <li>RapidXML is used for parsing the OSM files.</li> <li>Earcut is used for polygon triangulation, enabling visualization of filled areas in RViz2.</li> </ul>"},{"location":"lanelet2_rviz2/annotated/","title":"Class List","text":"<p>Here are the classes, structs, unions and interfaces with brief descriptions:</p> <ul> <li>class OSMVisualizer </li> <li>namespace osm <ul> <li>class LaneletRelation Class representing a lanelet relation. </li> <li>class Map </li> <li>class MapElement Abstract base class for map elements. </li> <li>class Node Class to store a single lanelet2 OSM node. </li> <li>class Relation Class to store a single lanelet2 OSM relation, which is a part of a street. <ul> <li>struct Member </li> </ul> </li> <li>class Way Class to store a single lanelet2 OSM way, which is a collection of nodes. </li> </ul> </li> <li>namespace rclcpp </li> <li>namespace chrono_literals </li> </ul>"},{"location":"lanelet2_rviz2/files/","title":"File List","text":"<p>Here is a list of all files with brief descriptions:</p> <ul> <li>dir include <ul> <li>dir lanelet2_rviz2 <ul> <li>file OSMVisualizer.hpp </li> <li>file Relation.hpp </li> <li>file map.hpp </li> <li>file mapelement.hpp </li> <li>file node.hpp </li> <li>file oldrelation.hpp </li> <li>file parse_osm.hpp </li> <li>file triangulate_polygon.hpp </li> <li>file way.hpp </li> </ul> </li> </ul> </li> <li>dir src <ul> <li>file OSMVisualizer.cpp </li> <li>file main.cpp </li> </ul> </li> </ul>"},{"location":"lanelet2_rviz2/classOSMVisualizer/","title":"Class OSMVisualizer","text":"<p>ClassList &gt; OSMVisualizer</p> <p>Inherits the following classes: rclcpp::Node</p>"},{"location":"lanelet2_rviz2/classOSMVisualizer/#public-functions","title":"Public Functions","text":"Type Name OSMVisualizer ()"},{"location":"lanelet2_rviz2/classOSMVisualizer/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"lanelet2_rviz2/classOSMVisualizer/#function-osmvisualizer","title":"function OSMVisualizer","text":"<pre><code>OSMVisualizer::OSMVisualizer () \n</code></pre> <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/OSMVisualizer.hpp</code></p>"},{"location":"lanelet2_rviz2/namespaceosm/","title":"Namespace osm","text":"<p>Namespace List &gt; osm</p>"},{"location":"lanelet2_rviz2/namespaceosm/#classes","title":"Classes","text":"Type Name class LaneletRelation Class representing a lanelet relation. class Map class MapElement Abstract base class for map elements. class Node Class to store a single lanelet2 OSM node. class Relation Class to store a single lanelet2 OSM relation, which is a part of a street. class Way Class to store a single lanelet2 OSM way, which is a collection of nodes. <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/map.hpp</code></p>"},{"location":"lanelet2_rviz2/classosm_1_1LaneletRelation/","title":"Class osm::LaneletRelation","text":"<p>ClassList &gt; osm &gt; LaneletRelation</p> <p>Class representing a lanelet relation. More...</p> <ul> <li><code>#include &lt;Relation.hpp&gt;</code></li> </ul> <p>Inherits the following classes: osm::Relation</p>"},{"location":"lanelet2_rviz2/classosm_1_1LaneletRelation/#public-functions","title":"Public Functions","text":"Type Name LaneletRelation (I64 id)  LaneletRelation (const LaneletRelation &amp;) = default LaneletRelation (LaneletRelation &amp;&amp;) = default virtual visualization_msgs::msg::MarkerArray draw (const std::string &amp; frame_id, const rclcpp::Time &amp; stamp, int &amp; marker_id, double line_width, double speed_color_max) override constCreate visualization markers for this lanelet relation. Way * left () const std::string location () const bool one_way () const LaneletRelation &amp; operator= (const LaneletRelation &amp;) = default LaneletRelation &amp; operator= (LaneletRelation &amp;&amp;) = default Way * right () const I64 speed_limit () const std::string turn_direction () const virtual ~LaneletRelation () = default"},{"location":"lanelet2_rviz2/classosm_1_1LaneletRelation/#public-functions-inherited-from-osmrelation","title":"Public Functions inherited from osm::Relation","text":"<p>See osm::Relation</p> Type Name Relation (const Relation &amp;) = default Relation (Relation &amp;&amp;) = default Relation (I64 id)  Relation () = default Relation (I64 id)  Relation (const Relation &amp;) = default Relation (Relation &amp;&amp;) = default void add_tag (const std::string &amp; key, const std::string &amp; value)  void add_tag (const std::string &amp; key, const std::string &amp; value)  virtual visualization_msgs::msg::MarkerArray draw (const std::string &amp; frame_id, const rclcpp::Time &amp; stamp, int &amp; marker_id, double line_width, double speed_color_max) const = 0 osm::Way * getMemberByRole (const std::string &amp; role, const std::map&lt; I64, osm::Way * &gt; &amp; ways) const osm::Way * getMemberByRole (const std::string &amp; role, const std::map&lt; I64, osm::Way * &gt; &amp; ways) const I64 id () const Way * left () const std::string location () const const std::vector&lt; Member &gt; &amp; members () const const std::vector&lt; Member &gt; &amp; members () const bool one_way () const Relation &amp; operator= (const Relation &amp;) = default Relation &amp; operator= (Relation &amp;&amp;) = default Relation &amp; operator= (const Relation &amp;) = default Relation &amp; operator= (Relation &amp;&amp;) = default Way * right () const void set_members (const std::vector&lt; Member &gt; &amp; members)  void set_members (const std::vector&lt; Member &gt; &amp; members)  I64 speed_limit () const std::string subtype () const const std::map&lt; std::string, std::string &gt; &amp; tags () const const std::map&lt; std::string, std::string &gt; &amp; tags () const std::string type () const ~Relation () = default virtual ~Relation () = default"},{"location":"lanelet2_rviz2/classosm_1_1LaneletRelation/#detailed-description","title":"Detailed Description","text":"<p>This class not only contains lanelet\u2013specific attributes but now also implements drawing of its own visualization markers. </p>"},{"location":"lanelet2_rviz2/classosm_1_1LaneletRelation/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"lanelet2_rviz2/classosm_1_1LaneletRelation/#function-laneletrelation-13","title":"function LaneletRelation [1/3]","text":"<pre><code>inline osm::LaneletRelation::LaneletRelation (\n    I64 id\n) \n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1LaneletRelation/#function-laneletrelation-23","title":"function LaneletRelation [2/3]","text":"<pre><code>osm::LaneletRelation::LaneletRelation (\n    const LaneletRelation &amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1LaneletRelation/#function-laneletrelation-33","title":"function LaneletRelation [3/3]","text":"<pre><code>osm::LaneletRelation::LaneletRelation (\n    LaneletRelation &amp;&amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1LaneletRelation/#function-draw","title":"function draw","text":"<p>Create visualization markers for this lanelet relation. <pre><code>inline virtual visualization_msgs::msg::MarkerArray osm::LaneletRelation::draw (\n    const std::string &amp; frame_id,\n    const rclcpp::Time &amp; stamp,\n    int &amp; marker_id,\n    double line_width,\n    double speed_color_max\n) override const\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>frame_id</code> The coordinate frame. </li> <li><code>stamp</code> The current time stamp. </li> <li><code>marker_id</code> A counter for unique marker IDs (which will be incremented). </li> <li><code>line_width</code> The desired line width for drawing. </li> <li><code>speed_color_max</code> The maximum speed used for color mapping. </li> </ul> <p>Returns:</p> <p>MarkerArray message with all markers for the relation. </p> <p>Implements osm::Relation::draw</p>"},{"location":"lanelet2_rviz2/classosm_1_1LaneletRelation/#function-left","title":"function left","text":"<pre><code>inline Way * osm::LaneletRelation::left () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1LaneletRelation/#function-location","title":"function location","text":"<pre><code>inline std::string osm::LaneletRelation::location () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1LaneletRelation/#function-one_way","title":"function one_way","text":"<pre><code>inline bool osm::LaneletRelation::one_way () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1LaneletRelation/#function-operator","title":"function operator=","text":"<pre><code>LaneletRelation &amp; osm::LaneletRelation::operator= (\n    const LaneletRelation &amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1LaneletRelation/#function-operator_1","title":"function operator=","text":"<pre><code>LaneletRelation &amp; osm::LaneletRelation::operator= (\n    LaneletRelation &amp;&amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1LaneletRelation/#function-right","title":"function right","text":"<pre><code>inline Way * osm::LaneletRelation::right () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1LaneletRelation/#function-speed_limit","title":"function speed_limit","text":"<pre><code>inline I64 osm::LaneletRelation::speed_limit () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1LaneletRelation/#function-turn_direction","title":"function turn_direction","text":"<pre><code>inline std::string osm::LaneletRelation::turn_direction () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1LaneletRelation/#function-laneletrelation","title":"function ~LaneletRelation","text":"<pre><code>virtual osm::LaneletRelation::~LaneletRelation () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/Relation.hpp</code></p>"},{"location":"lanelet2_rviz2/classosm_1_1Map/","title":"Class osm::Map","text":"<p>ClassList &gt; osm &gt; Map</p>"},{"location":"lanelet2_rviz2/classosm_1_1Map/#public-attributes","title":"Public Attributes","text":"Type Name int metainfo_format_version std::string metainfo_map_version std::vector&lt; osm::Node * &gt; nodes std::string osm_generator std::vector&lt; osm::Relation * &gt; relations std::vector&lt; osm::Way * &gt; ways std::string xml_encoding float xml_version"},{"location":"lanelet2_rviz2/classosm_1_1Map/#public-functions","title":"Public Functions","text":"Type Name Map () = default Map (const Map &amp;) = default Map (Map &amp;&amp;) = default Map &amp; operator= (const Map &amp;) = default Map &amp; operator= (Map &amp;&amp;) = default ~Map () = default"},{"location":"lanelet2_rviz2/classosm_1_1Map/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"lanelet2_rviz2/classosm_1_1Map/#variable-metainfo_format_version","title":"variable metainfo_format_version","text":"<pre><code>int osm::Map::metainfo_format_version;\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Map/#variable-metainfo_map_version","title":"variable metainfo_map_version","text":"<pre><code>std::string osm::Map::metainfo_map_version;\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Map/#variable-nodes","title":"variable nodes","text":"<pre><code>std::vector&lt;osm::Node*&gt; osm::Map::nodes;\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Map/#variable-osm_generator","title":"variable osm_generator","text":"<pre><code>std::string osm::Map::osm_generator;\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Map/#variable-relations","title":"variable relations","text":"<pre><code>std::vector&lt;osm::Relation*&gt; osm::Map::relations;\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Map/#variable-ways","title":"variable ways","text":"<pre><code>std::vector&lt;osm::Way*&gt; osm::Map::ways;\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Map/#variable-xml_encoding","title":"variable xml_encoding","text":"<pre><code>std::string osm::Map::xml_encoding;\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Map/#variable-xml_version","title":"variable xml_version","text":"<pre><code>float osm::Map::xml_version;\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Map/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"lanelet2_rviz2/classosm_1_1Map/#function-map-13","title":"function Map [1/3]","text":"<pre><code>osm::Map::Map () = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Map/#function-map-23","title":"function Map [2/3]","text":"<pre><code>osm::Map::Map (\n    const Map &amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Map/#function-map-33","title":"function Map [3/3]","text":"<pre><code>osm::Map::Map (\n    Map &amp;&amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Map/#function-operator","title":"function operator=","text":"<pre><code>Map &amp; osm::Map::operator= (\n    const Map &amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Map/#function-operator_1","title":"function operator=","text":"<pre><code>Map &amp; osm::Map::operator= (\n    Map &amp;&amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Map/#function-map","title":"function ~Map","text":"<pre><code>osm::Map::~Map () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/map.hpp</code></p>"},{"location":"lanelet2_rviz2/classosm_1_1MapElement/","title":"Class osm::MapElement","text":"<p>ClassList &gt; osm &gt; MapElement</p> <p>Abstract base class for map elements. More...</p> <ul> <li><code>#include &lt;mapelement.hpp&gt;</code></li> </ul>"},{"location":"lanelet2_rviz2/classosm_1_1MapElement/#public-functions","title":"Public Functions","text":"Type Name MapElement () = default MapElement (const MapElement &amp;) = default MapElement (MapElement &amp;&amp;) = default virtual void draw () const = 0 MapElement &amp; operator= (const MapElement &amp;) = default MapElement &amp; operator= (MapElement &amp;&amp;) = default virtual ~MapElement () = default"},{"location":"lanelet2_rviz2/classosm_1_1MapElement/#detailed-description","title":"Detailed Description","text":"<p>This class serves as a base for all elements in the map that can be drawn, currently most relations, and specific ways. </p>"},{"location":"lanelet2_rviz2/classosm_1_1MapElement/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"lanelet2_rviz2/classosm_1_1MapElement/#function-mapelement-13","title":"function MapElement [1/3]","text":"<pre><code>osm::MapElement::MapElement () = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1MapElement/#function-mapelement-23","title":"function MapElement [2/3]","text":"<pre><code>osm::MapElement::MapElement (\n    const MapElement &amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1MapElement/#function-mapelement-33","title":"function MapElement [3/3]","text":"<pre><code>osm::MapElement::MapElement (\n    MapElement &amp;&amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1MapElement/#function-draw","title":"function draw","text":"<pre><code>virtual void osm::MapElement::draw () const = 0\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1MapElement/#function-operator","title":"function operator=","text":"<pre><code>MapElement &amp; osm::MapElement::operator= (\n    const MapElement &amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1MapElement/#function-operator_1","title":"function operator=","text":"<pre><code>MapElement &amp; osm::MapElement::operator= (\n    MapElement &amp;&amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1MapElement/#function-mapelement","title":"function ~MapElement","text":"<pre><code>virtual osm::MapElement::~MapElement () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/mapelement.hpp</code></p>"},{"location":"lanelet2_rviz2/classosm_1_1Node/","title":"Class osm::Node","text":"<p>ClassList &gt; osm &gt; Node</p> <p>Class to store a single lanelet2 OSM node. </p> <ul> <li><code>#include &lt;node.hpp&gt;</code></li> </ul>"},{"location":"lanelet2_rviz2/classosm_1_1Node/#public-functions","title":"Public Functions","text":"Type Name Node (const Node &amp;) = default Node (Node &amp;&amp;) = default Node (I64 id, double lat, double lon, double local_x, double local_y, double ele)  double ele () const I64 id () const double lat () const double local_x () const double local_y () const double lon () const Node &amp; operator= (const Node &amp;) = default Node &amp; operator= (Node &amp;&amp;) = default void set_local_x (double local_x)  void set_local_y (double local_y)  ~Node () = default"},{"location":"lanelet2_rviz2/classosm_1_1Node/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"lanelet2_rviz2/classosm_1_1Node/#function-node-13","title":"function Node [1/3]","text":"<pre><code>osm::Node::Node (\n    const Node &amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Node/#function-node-23","title":"function Node [2/3]","text":"<pre><code>osm::Node::Node (\n    Node &amp;&amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Node/#function-node-33","title":"function Node [3/3]","text":"<pre><code>inline osm::Node::Node (\n    I64 id,\n    double lat,\n    double lon,\n    double local_x,\n    double local_y,\n    double ele\n) \n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Node/#function-ele","title":"function ele","text":"<pre><code>inline double osm::Node::ele () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Node/#function-id","title":"function id","text":"<pre><code>inline I64 osm::Node::id () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Node/#function-lat","title":"function lat","text":"<pre><code>inline double osm::Node::lat () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Node/#function-local_x","title":"function local_x","text":"<pre><code>inline double osm::Node::local_x () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Node/#function-local_y","title":"function local_y","text":"<pre><code>inline double osm::Node::local_y () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Node/#function-lon","title":"function lon","text":"<pre><code>inline double osm::Node::lon () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Node/#function-operator","title":"function operator=","text":"<pre><code>Node &amp; osm::Node::operator= (\n    const Node &amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Node/#function-operator_1","title":"function operator=","text":"<pre><code>Node &amp; osm::Node::operator= (\n    Node &amp;&amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Node/#function-set_local_x","title":"function set_local_x","text":"<pre><code>inline void osm::Node::set_local_x (\n    double local_x\n) \n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Node/#function-set_local_y","title":"function set_local_y","text":"<pre><code>inline void osm::Node::set_local_y (\n    double local_y\n) \n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Node/#function-node","title":"function ~Node","text":"<pre><code>osm::Node::~Node () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/node.hpp</code></p>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/","title":"Class osm::Relation","text":"<p>ClassList &gt; osm &gt; Relation</p> <p>Class to store a single lanelet2 OSM relation, which is a part of a street. More...</p> <ul> <li><code>#include &lt;oldrelation.hpp&gt;</code></li> </ul> <p>Inherited by the following classes: osm::LaneletRelation</p>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#classes","title":"Classes","text":"Type Name struct Member"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#public-functions","title":"Public Functions","text":"Type Name Relation (const Relation &amp;) = default Relation (Relation &amp;&amp;) = default Relation (I64 id)  Relation () = default Relation (I64 id)  Relation (const Relation &amp;) = default Relation (Relation &amp;&amp;) = default void add_tag (const std::string &amp; key, const std::string &amp; value)  void add_tag (const std::string &amp; key, const std::string &amp; value)  virtual visualization_msgs::msg::MarkerArray draw (const std::string &amp; frame_id, const rclcpp::Time &amp; stamp, int &amp; marker_id, double line_width, double speed_color_max) const = 0 osm::Way * getMemberByRole (const std::string &amp; role, const std::map&lt; I64, osm::Way * &gt; &amp; ways) const osm::Way * getMemberByRole (const std::string &amp; role, const std::map&lt; I64, osm::Way * &gt; &amp; ways) const I64 id () const Way * left () const std::string location () const const std::vector&lt; Member &gt; &amp; members () const const std::vector&lt; Member &gt; &amp; members () const bool one_way () const Relation &amp; operator= (const Relation &amp;) = default Relation &amp; operator= (Relation &amp;&amp;) = default Relation &amp; operator= (const Relation &amp;) = default Relation &amp; operator= (Relation &amp;&amp;) = default Way * right () const void set_members (const std::vector&lt; Member &gt; &amp; members)  void set_members (const std::vector&lt; Member &gt; &amp; members)  I64 speed_limit () const std::string subtype () const const std::map&lt; std::string, std::string &gt; &amp; tags () const const std::map&lt; std::string, std::string &gt; &amp; tags () const std::string type () const ~Relation () = default virtual ~Relation () = default"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#detailed-description","title":"Detailed Description","text":"<p>Abstract base class for relations. </p>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-relation-17","title":"function Relation [1/7]","text":"<pre><code>osm::Relation::Relation (\n    const Relation &amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-relation-27","title":"function Relation [2/7]","text":"<pre><code>osm::Relation::Relation (\n    Relation &amp;&amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-relation-37","title":"function Relation [3/7]","text":"<pre><code>inline osm::Relation::Relation (\n    I64 id\n) \n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-relation-47","title":"function Relation [4/7]","text":"<pre><code>osm::Relation::Relation () = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-relation-37_1","title":"function Relation [3/7]","text":"<pre><code>inline osm::Relation::Relation (\n    I64 id\n) \n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-relation-17_1","title":"function Relation [1/7]","text":"<pre><code>osm::Relation::Relation (\n    const Relation &amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-relation-27_1","title":"function Relation [2/7]","text":"<pre><code>osm::Relation::Relation (\n    Relation &amp;&amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-add_tag-12","title":"function add_tag [1/2]","text":"<pre><code>inline void osm::Relation::add_tag (\n    const std::string &amp; key,\n    const std::string &amp; value\n) \n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-add_tag-12_1","title":"function add_tag [1/2]","text":"<pre><code>inline void osm::Relation::add_tag (\n    const std::string &amp; key,\n    const std::string &amp; value\n) \n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-draw","title":"function draw","text":"<pre><code>virtual visualization_msgs::msg::MarkerArray osm::Relation::draw (\n    const std::string &amp; frame_id,\n    const rclcpp::Time &amp; stamp,\n    int &amp; marker_id,\n    double line_width,\n    double speed_color_max\n) const = 0\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-getmemberbyrole-12","title":"function getMemberByRole [1/2]","text":"<pre><code>inline osm::Way * osm::Relation::getMemberByRole (\n    const std::string &amp; role,\n    const std::map&lt; I64, osm::Way * &gt; &amp; ways\n) const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-getmemberbyrole-12_1","title":"function getMemberByRole [1/2]","text":"<pre><code>inline osm::Way * osm::Relation::getMemberByRole (\n    const std::string &amp; role,\n    const std::map&lt; I64, osm::Way * &gt; &amp; ways\n) const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-id","title":"function id","text":"<pre><code>inline I64 osm::Relation::id () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-left","title":"function left","text":"<pre><code>inline Way * osm::Relation::left () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-location","title":"function location","text":"<pre><code>inline std::string osm::Relation::location () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-members-12","title":"function members [1/2]","text":"<pre><code>inline const std::vector&lt; Member &gt; &amp; osm::Relation::members () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-members-12_1","title":"function members [1/2]","text":"<pre><code>inline const std::vector&lt; Member &gt; &amp; osm::Relation::members () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-one_way","title":"function one_way","text":"<pre><code>inline bool osm::Relation::one_way () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-operator","title":"function operator=","text":"<pre><code>Relation &amp; osm::Relation::operator= (\n    const Relation &amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-operator_1","title":"function operator=","text":"<pre><code>Relation &amp; osm::Relation::operator= (\n    Relation &amp;&amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-operator_2","title":"function operator=","text":"<pre><code>Relation &amp; osm::Relation::operator= (\n    const Relation &amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-operator_3","title":"function operator=","text":"<pre><code>Relation &amp; osm::Relation::operator= (\n    Relation &amp;&amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-right","title":"function right","text":"<pre><code>inline Way * osm::Relation::right () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-set_members-12","title":"function set_members [1/2]","text":"<pre><code>inline void osm::Relation::set_members (\n    const std::vector&lt; Member &gt; &amp; members\n) \n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-set_members-12_1","title":"function set_members [1/2]","text":"<pre><code>inline void osm::Relation::set_members (\n    const std::vector&lt; Member &gt; &amp; members\n) \n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-speed_limit","title":"function speed_limit","text":"<pre><code>inline I64 osm::Relation::speed_limit () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-subtype","title":"function subtype","text":"<pre><code>inline std::string osm::Relation::subtype () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-tags-12","title":"function tags [1/2]","text":"<pre><code>inline const std::map&lt; std::string, std::string &gt; &amp; osm::Relation::tags () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-tags-12_1","title":"function tags [1/2]","text":"<pre><code>inline const std::map&lt; std::string, std::string &gt; &amp; osm::Relation::tags () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-type","title":"function type","text":"<pre><code>inline std::string osm::Relation::type () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-relation-12","title":"function ~Relation [1/2]","text":"<pre><code>osm::Relation::~Relation () = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Relation/#function-relation-22","title":"function ~Relation [2/2]","text":"<pre><code>virtual osm::Relation::~Relation () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/oldrelation.hpp</code></p>"},{"location":"lanelet2_rviz2/structosm_1_1Relation_1_1Member/","title":"Struct osm::Relation::Member","text":"<p>ClassList &gt; osm &gt; Relation &gt; Member</p>"},{"location":"lanelet2_rviz2/structosm_1_1Relation_1_1Member/#public-attributes","title":"Public Attributes","text":"Type Name I64 ref std::string role std::string type"},{"location":"lanelet2_rviz2/structosm_1_1Relation_1_1Member/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"lanelet2_rviz2/structosm_1_1Relation_1_1Member/#variable-ref","title":"variable ref","text":"<pre><code>I64 osm::Relation::Member::ref;\n</code></pre>"},{"location":"lanelet2_rviz2/structosm_1_1Relation_1_1Member/#variable-role","title":"variable role","text":"<pre><code>std::string osm::Relation::Member::role;\n</code></pre>"},{"location":"lanelet2_rviz2/structosm_1_1Relation_1_1Member/#variable-type","title":"variable type","text":"<pre><code>std::string osm::Relation::Member::type;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/oldrelation.hpp</code></p>"},{"location":"lanelet2_rviz2/classosm_1_1Way/","title":"Class osm::Way","text":"<p>ClassList &gt; osm &gt; Way</p> <p>Class to store a single lanelet2 OSM way, which is a collection of nodes. </p> <ul> <li><code>#include &lt;way.hpp&gt;</code></li> </ul>"},{"location":"lanelet2_rviz2/classosm_1_1Way/#public-functions","title":"Public Functions","text":"Type Name Way (const Way &amp;) = default Way (Way &amp;&amp;) = default Way (I64 id)  void add_node (osm::Node * node)  void add_tag (const std::string &amp; key, const std::string &amp; value)  I64 id () const const std::vector&lt; osm::Node * &gt; &amp; nodes () const Way &amp; operator= (const Way &amp;) = default Way &amp; operator= (Way &amp;&amp;) = default const std::map&lt; std::string, std::string &gt; &amp; tags () const ~Way () = default"},{"location":"lanelet2_rviz2/classosm_1_1Way/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"lanelet2_rviz2/classosm_1_1Way/#function-way-13","title":"function Way [1/3]","text":"<pre><code>osm::Way::Way (\n    const Way &amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Way/#function-way-23","title":"function Way [2/3]","text":"<pre><code>osm::Way::Way (\n    Way &amp;&amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Way/#function-way-33","title":"function Way [3/3]","text":"<pre><code>inline osm::Way::Way (\n    I64 id\n) \n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Way/#function-add_node","title":"function add_node","text":"<pre><code>inline void osm::Way::add_node (\n    osm::Node * node\n) \n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Way/#function-add_tag","title":"function add_tag","text":"<pre><code>inline void osm::Way::add_tag (\n    const std::string &amp; key,\n    const std::string &amp; value\n) \n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Way/#function-id","title":"function id","text":"<pre><code>inline I64 osm::Way::id () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Way/#function-nodes","title":"function nodes","text":"<pre><code>inline const std::vector&lt; osm::Node * &gt; &amp; osm::Way::nodes () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Way/#function-operator","title":"function operator=","text":"<pre><code>Way &amp; osm::Way::operator= (\n    const Way &amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Way/#function-operator_1","title":"function operator=","text":"<pre><code>Way &amp; osm::Way::operator= (\n    Way &amp;&amp;\n) = default\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Way/#function-tags","title":"function tags","text":"<pre><code>inline const std::map&lt; std::string, std::string &gt; &amp; osm::Way::tags () const\n</code></pre>"},{"location":"lanelet2_rviz2/classosm_1_1Way/#function-way","title":"function ~Way","text":"<pre><code>osm::Way::~Way () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/way.hpp</code></p>"},{"location":"lanelet2_rviz2/namespacerclcpp/","title":"Namespace rclcpp","text":"<p>Namespace List &gt; rclcpp</p> <p>The documentation for this class was generated from the following file <code>[generated]</code></p>"},{"location":"lanelet2_rviz2/namespacestd_1_1chrono__literals/","title":"Namespace std::chrono_literals","text":"<p>Namespace List &gt; chrono_literals</p> <p>The documentation for this class was generated from the following file <code>src/OSMVisualizer.cpp</code></p>"},{"location":"lanelet2_rviz2/dir_d44c64559bbebec7f509842c48db8b23/","title":"Dir include","text":"<p>FileList &gt; include</p>"},{"location":"lanelet2_rviz2/dir_d44c64559bbebec7f509842c48db8b23/#directories","title":"Directories","text":"Type Name dir lanelet2_rviz2 <p>The documentation for this class was generated from the following file <code>include/</code></p>"},{"location":"lanelet2_rviz2/dir_65eef65f6947ac43fda5ad768861708a/","title":"Dir include/lanelet2_rviz2","text":"<p>FileList &gt; include &gt; lanelet2_rviz2</p>"},{"location":"lanelet2_rviz2/dir_65eef65f6947ac43fda5ad768861708a/#files","title":"Files","text":"Type Name file OSMVisualizer.hpp file Relation.hpp file map.hpp file mapelement.hpp file node.hpp file oldrelation.hpp file parse_osm.hpp file triangulate_polygon.hpp file way.hpp <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/</code></p>"},{"location":"lanelet2_rviz2/OSMVisualizer_8hpp/","title":"File OSMVisualizer.hpp","text":"<p>FileList &gt; include &gt; lanelet2_rviz2 &gt; OSMVisualizer.hpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;rclcpp/rclcpp.hpp&gt;</code></li> <li><code>#include &lt;map&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;array&gt;</code></li> <li><code>#include &lt;stdexcept&gt;</code></li> <li><code>#include &lt;geometry_msgs/msg/polygon_stamped.hpp&gt;</code></li> <li><code>#include &lt;geometry_msgs/msg/point.hpp&gt;</code></li> <li><code>#include &lt;geometry_msgs/msg/point32.hpp&gt;</code></li> <li><code>#include &lt;visualization_msgs/msg/marker.hpp&gt;</code></li> <li><code>#include &lt;visualization_msgs/msg/marker_array.hpp&gt;</code></li> <li><code>#include &lt;rcl_interfaces/msg/set_parameters_result.hpp&gt;</code></li> <li><code>#include \"lanelet2_rviz2/node.hpp\"</code></li> <li><code>#include \"lanelet2_rviz2/way.hpp\"</code></li> <li><code>#include \"lanelet2_rviz2/Relation.hpp\"</code></li> <li><code>#include \"earcut.hpp\"</code></li> </ul>"},{"location":"lanelet2_rviz2/OSMVisualizer_8hpp/#classes","title":"Classes","text":"Type Name class OSMVisualizer"},{"location":"lanelet2_rviz2/OSMVisualizer_8hpp/#public-types","title":"Public Types","text":"Type Name typedef long long I64"},{"location":"lanelet2_rviz2/OSMVisualizer_8hpp/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"lanelet2_rviz2/OSMVisualizer_8hpp/#typedef-i64","title":"typedef I64","text":"<pre><code>using I64 =  long long;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/OSMVisualizer.hpp</code></p>"},{"location":"lanelet2_rviz2/OSMVisualizer_8hpp_source/","title":"File OSMVisualizer.hpp","text":"<p>File List &gt; include &gt; lanelet2_rviz2 &gt; OSMVisualizer.hpp</p> <p>Go to the documentation of this file</p> <pre><code>#ifndef LANELET2_RVIZ2__OSM_VISUALIZER_HPP\n#define LANELET2_RVIZ2__OSM_VISUALIZER_HPP\n\n#include &lt;rclcpp/rclcpp.hpp&gt;\n#include &lt;map&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;array&gt;\n#include &lt;stdexcept&gt;\n\n// ROS message includes\n#include &lt;geometry_msgs/msg/polygon_stamped.hpp&gt;\n#include &lt;geometry_msgs/msg/point.hpp&gt;\n#include &lt;geometry_msgs/msg/point32.hpp&gt;\n#include &lt;visualization_msgs/msg/marker.hpp&gt;\n#include &lt;visualization_msgs/msg/marker_array.hpp&gt;\n#include &lt;rcl_interfaces/msg/set_parameters_result.hpp&gt;\n\n#include \"lanelet2_rviz2/node.hpp\"\n#include \"lanelet2_rviz2/way.hpp\"\n#include \"lanelet2_rviz2/Relation.hpp\"\n\n// Include Earcut (used for triangulation)\n#include \"earcut.hpp\"\n\n// Forward declarations for types provided by the OSM parser\n\nusing I64 = long long;\n\nclass OSMVisualizer : public rclcpp::Node {\npublic:\n  OSMVisualizer();\n  // Optionally you could implement a destructor to clear data:\n  // ~OSMVisualizer();\n\nprivate:\n  // Callback for parameter changes\n  rcl_interfaces::msg::SetParametersResult parametersCallback(\n    const std::vector&lt;rclcpp::Parameter&gt;&amp; parameters);\n\n\n\n  // Computes the center of map coordinates and recenters the nodes.\n  void centerCoordinates();\n\n  // Helper: maps a value from one range to another.\n  float mapval(float x, float in_min, float in_max, float out_min, float out_max) const;\n\n  // Publishes markers (lines, polygons, and arrows) for visualizing OSM data.\n  void publishMarkers();\n\n  // Clears any stored data (nodes, ways, relations)\n  void clearData();\n\n  // Parses the OSM file; should populate nodes_, ways_, and relations_.\n  // (Note: The implementation is not provided in the original file.)\n  void parseOSMFile(const char* filename);\n\nprivate:\n  std::map&lt;I64, osm::Node*&gt; nodes_;\n  std::map&lt;I64, osm::Way*&gt; ways_;\n  std::map&lt;I64, osm::Relation*&gt; relations_;\n\n  rclcpp::Publisher&lt;visualization_msgs::msg::MarkerArray&gt;::SharedPtr marker_array_relations_pub_;\n  rclcpp::TimerBase::SharedPtr timer_;\n  rclcpp::node_interfaces::OnSetParametersCallbackHandle::SharedPtr on_set_parameters_callback_handle_;\n\n  double center_x_ = 0.0;\n  double center_y_ = 0.0;\n  bool data_loaded_ = false;\n  double line_width_ = 0.8;\n  std::string frame_id_ = \"map_gyor_0\";\n  std::string filename_;      // OSM filename parameter\n  bool center_map_ = false;   // Whether to center the map\n  double speed_color_max_ = 90.0;\n};\n\n#endif  // LANELET2_RVIZ2__OSM_VISUALIZER_HPP\n</code></pre>"},{"location":"lanelet2_rviz2/Relation_8hpp/","title":"File Relation.hpp","text":"<p>FileList &gt; include &gt; lanelet2_rviz2 &gt; Relation.hpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;map&gt;</code></li> <li><code>#include &lt;cmath&gt;</code></li> <li><code>#include &lt;visualization_msgs/msg/marker_array.hpp&gt;</code></li> <li><code>#include &lt;visualization_msgs/msg/marker.hpp&gt;</code></li> <li><code>#include &lt;geometry_msgs/msg/point.hpp&gt;</code></li> <li><code>#include &lt;geometry_msgs/msg/point32.hpp&gt;</code></li> <li><code>#include &lt;geometry_msgs/msg/polygon_stamped.hpp&gt;</code></li> <li><code>#include \"node.hpp\"</code></li> <li><code>#include \"lanelet2_rviz2/triangulate_polygon.hpp\"</code></li> <li><code>#include &lt;rclcpp/rclcpp.hpp&gt;</code></li> </ul>"},{"location":"lanelet2_rviz2/Relation_8hpp/#namespaces","title":"Namespaces","text":"Type Name namespace osm"},{"location":"lanelet2_rviz2/Relation_8hpp/#classes","title":"Classes","text":"Type Name class LaneletRelation Class representing a lanelet relation. class Relation Class to store a single lanelet2 OSM relation, which is a part of a street. struct Member <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/Relation.hpp</code></p>"},{"location":"lanelet2_rviz2/Relation_8hpp_source/","title":"File Relation.hpp","text":"<p>File List &gt; include &gt; lanelet2_rviz2 &gt; Relation.hpp</p> <p>Go to the documentation of this file</p> <pre><code>#ifndef LANELET2_RVIZ2_RELATION_HPP\n#define LANELET2_RVIZ2_RELATION_HPP\n\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;map&gt;\n#include &lt;cmath&gt;\n\n// ROS2 messages\n#include &lt;visualization_msgs/msg/marker_array.hpp&gt;\n#include &lt;visualization_msgs/msg/marker.hpp&gt;\n#include &lt;geometry_msgs/msg/point.hpp&gt;\n#include &lt;geometry_msgs/msg/point32.hpp&gt;\n#include &lt;geometry_msgs/msg/polygon_stamped.hpp&gt;\n\n// Include your own headers\n#include \"node.hpp\"\n\n#include \"lanelet2_rviz2/triangulate_polygon.hpp\" // Include your triangulation function\n\n// Forward declaration for ROS time (you might include rclcpp if needed)\n#include &lt;rclcpp/rclcpp.hpp&gt;\n\nclass OSMVisualizer;\n\nnamespace osm {\n\n// Forward declaration for Way so that pointer types can be used.\nclass Way;\n\nclass Relation  {\npublic:\n    struct Member {\n        std::string type;\n        std::string role;\n        I64 ref;\n    };\n\n    Relation() = default;\n    Relation(I64 id) : id_(id) {}\n    Relation(const Relation&amp;) = default;\n    Relation(Relation&amp;&amp;) = default;\n    Relation&amp; operator=(const Relation&amp;) = default;\n    Relation&amp; operator=(Relation&amp;&amp;) = default;\n    virtual ~Relation() = default;\n\n    // NOTE: The base draw() was originally a void function. In this refactoring,\n    // we assume that only LaneletRelation uses the visualization message.\n    virtual visualization_msgs::msg::MarkerArray draw(const std::string &amp;frame_id,\n                                                    const rclcpp::Time &amp;stamp,\n                                                    int &amp;marker_id,\n                                                    double line_width,\n                                                    double speed_color_max) const = 0;\n\n        // Set the vector of members parsed from the OSM file\n    void set_members(const std::vector&lt;Member&gt;&amp; members) {\n        members_ = members;\n    }\n\n    // (Optional) Getter for the members vector\n    const std::vector&lt;Member&gt;&amp; members() const {\n        return members_;\n    }\n\n    // Add a tag key/value pair to this relation\n    void add_tag(const std::string &amp;key, const std::string &amp;value) {\n        tags_[key] = value;\n    }\n\n    // (Optional) Getter for tags\n    const std::map&lt;std::string, std::string&gt;&amp; tags() const {\n        return tags_;\n    }\n\n    // (Optional) Helper to get a member by role\n    osm::Way* getMemberByRole(const std::string &amp;role, const std::map&lt;I64, osm::Way*&gt;&amp; ways) const {\n        for (const auto &amp;m : members_) {\n            if (m.role == role &amp;&amp; ways.count(m.ref)) {\n                return ways.at(m.ref);\n            }\n        }\n        return nullptr;\n    }\n\nprotected:\n    I64 id_{0};\n    std::string type_;\n    std::string subtype_;\n    std::vector&lt;Member&gt; members_;\n    std::map&lt;std::string, std::string&gt; tags_;\n};\n\nclass LaneletRelation : public Relation {\npublic:\n    LaneletRelation(I64 id) : Relation(id) {}\n    LaneletRelation(const LaneletRelation&amp;) = default;\n    LaneletRelation(LaneletRelation&amp;&amp;) = default;\n    LaneletRelation&amp; operator=(const LaneletRelation&amp;) = default;\n    LaneletRelation&amp; operator=(LaneletRelation&amp;&amp;) = default;\n    virtual ~LaneletRelation() = default;\n\n    // Lanelet\u2013specific getters.\n    Way* left() const { return left_; }\n    Way* right() const { return right_; }\n    I64 speed_limit() const { return speed_limit_; }\n    std::string location() const { return location_; }\n    bool one_way() const { return one_way_; }\n    std::string turn_direction() const { return turn_direction_; }\n\n    visualization_msgs::msg::MarkerArray draw(const std::string &amp;frame_id,\n                                                const rclcpp::Time &amp;stamp,\n                                                int &amp;marker_id,\n                                                double line_width,\n                                                double speed_color_max) const override\n    {\n        visualization_msgs::msg::MarkerArray marker_array;\n\n        // --- Create left way marker ---\n        if (left_) {\n            visualization_msgs::msg::Marker left_marker;\n            left_marker.header.frame_id = frame_id;\n            left_marker.header.stamp = stamp;\n            left_marker.ns = \"osm_relations_left\";\n            left_marker.id = marker_id++;\n            left_marker.type = visualization_msgs::msg::Marker::LINE_STRIP;\n            left_marker.action = visualization_msgs::msg::Marker::ADD;\n            // Set color for left way (lime)\n            left_marker.color.r = 0.863;\n            left_marker.color.g = 0.902;\n            left_marker.color.b = 0.459;\n            left_marker.color.a = 1.0;\n            left_marker.scale.x = line_width;\n\n            // Add points from left way nodes.\n            for (const osm::Node *node : left_-&gt;nodes()) {\n                geometry_msgs::msg::Point point;\n                point.x = node-&gt;local_x();\n                point.y = node-&gt;local_y();\n                point.z = node-&gt;ele();\n                left_marker.points.push_back(point);\n            }\n            marker_array.markers.push_back(left_marker);\n        } else {\n            RCLCPP_WARN(rclcpp::get_logger(\"LaneletRelation\"), \"Relation (ID: %lld) has no left member\", id_);\n        }\n\n        // --- Create right way marker ---\n        if (right_) {\n            visualization_msgs::msg::Marker right_marker;\n            right_marker.header.frame_id = frame_id;\n            right_marker.header.stamp = stamp;\n            right_marker.ns = \"osm_relations_right\";\n            right_marker.id = marker_id++;\n            right_marker.type = visualization_msgs::msg::Marker::LINE_STRIP;\n            right_marker.action = visualization_msgs::msg::Marker::ADD;\n            // Set color for right way (red)\n            right_marker.color.r = 0.898;\n            right_marker.color.g = 0.451;\n            right_marker.color.b = 0.451;\n            right_marker.color.a = 1.0;\n            right_marker.scale.x = line_width;\n\n            // Add points from right way nodes.\n            for (const osm::Node *node : right_-&gt;nodes()) {\n                geometry_msgs::msg::Point point;\n                point.x = node-&gt;local_x();\n                point.y = node-&gt;local_y();\n                point.z = node-&gt;ele();\n                right_marker.points.push_back(point);\n            }\n            marker_array.markers.push_back(right_marker);\n        } else {\n            RCLCPP_WARN(rclcpp::get_logger(\"LaneletRelation\"), \"Relation (ID: %lld) has no right member\", id_);\n        }\n\n        // --- Create polygon for triangulation (speed marker) ---\n        geometry_msgs::msg::PolygonStamped left_right_polygon;\n        left_right_polygon.header.frame_id = frame_id;\n        left_right_polygon.header.stamp = stamp;\n\n        if (left_) {\n            for (const osm::Node *node : left_-&gt;nodes()) {\n                geometry_msgs::msg::Point32 point;\n                point.x = node-&gt;local_x();\n                point.y = node-&gt;local_y();\n                point.z = node-&gt;ele();\n                left_right_polygon.polygon.points.push_back(point);\n            }\n        } else {\n            RCLCPP_WARN(rclcpp::get_logger(\"LaneletRelation\"), \"Relation (ID: %lld) has no left member for polygon\", id_);\n        }\n        if (right_) {\n            // Add right way nodes in reverse order.\n            for (auto it = right_-&gt;nodes().rbegin(); it != right_-&gt;nodes().rend(); ++it) {\n                const osm::Node *node = *it;\n                geometry_msgs::msg::Point32 point;\n                point.x = node-&gt;local_x();\n                point.y = node-&gt;local_y();\n                point.z = node-&gt;ele();\n                left_right_polygon.polygon.points.push_back(point);\n            }\n        } else {\n            RCLCPP_WARN(rclcpp::get_logger(\"LaneletRelation\"), \"Relation (ID: %lld) has no right member for polygon\", id_);\n        }\n\n        // --- Set up gradient color based on speed limit ---\n        float green_r = 127.0f / 255.0f, green_g = 255.0f / 255.0f, green_b = 187.0f / 255.0f;\n        float red_r = 231.0f / 255.0f, red_g = 54.0f / 255.0f, red_b = 102.0f / 255.0f;\n        float blue_r = 0.0f / 255.0f, blue_g = 136.0f / 255.0f, blue_b = 204.0f / 255.0f;\n        double r_color, g_color, b_color;\n\n        if (speed_limit() &lt; 0) {\n            r_color = green_r; g_color = green_g; b_color = green_b;\n        } else if (speed_limit() &gt; speed_color_max) {\n            r_color = red_r; g_color = red_g; b_color = red_b;\n        } else if (speed_limit() &gt; 0 &amp;&amp; speed_limit() &lt; speed_color_max / 2) {\n            float c0 = mapval(speed_limit(), 0, speed_color_max / 2, green_r, blue_r);\n            float c1 = mapval(speed_limit(), 0, speed_color_max / 2, green_g, blue_g);\n            float c2 = mapval(speed_limit(), 0, speed_color_max / 2, green_b, blue_b);\n            r_color = c0; g_color = c1; b_color = c2;\n        } else {\n            float c0 = mapval(speed_limit(), speed_color_max / 2, speed_color_max, blue_r, red_r);\n            float c1 = mapval(speed_limit(), speed_color_max / 2, speed_color_max, blue_g, red_g);\n            float c2 = mapval(speed_limit(), speed_color_max / 2, speed_color_max, blue_b, red_b);\n            r_color = c0; g_color = c1; b_color = c2;\n        }\n\n        // --- Triangulate the polygon --- \n        // Assume triangulatePolygon is a helper function that creates a Marker from a polygon.\n        visualization_msgs::msg::Marker triangle_marker =\n            triangulatePolygon(left_right_polygon, r_color, g_color, b_color, 0.1, marker_id++);\n        marker_array.markers.push_back(triangle_marker);\n\n        // --- Create one\u2013way arrow marker ---\n        visualization_msgs::msg::Marker one_way_arrow;\n        one_way_arrow.header.frame_id = frame_id;\n        one_way_arrow.header.stamp = stamp;\n        one_way_arrow.ns = \"osm_one_way_arrows\";\n        one_way_arrow.id = marker_id++;\n        one_way_arrow.type = visualization_msgs::msg::Marker::TRIANGLE_LIST;\n        one_way_arrow.action = visualization_msgs::msg::Marker::ADD;\n        // Set arrow color to white.\n        one_way_arrow.color.r = 1.0;\n        one_way_arrow.color.g = 1.0;\n        one_way_arrow.color.b = 1.0;\n        one_way_arrow.color.a = 1.0;\n        one_way_arrow.scale.x = 1.0;\n        one_way_arrow.scale.y = 1.0;\n        one_way_arrow.scale.z = 1.0;\n\n        if (!left_ || left_-&gt;nodes().empty() || !right_ || right_-&gt;nodes().empty()) {\n            RCLCPP_WARN(rclcpp::get_logger(\"LaneletRelation\"), \"Relation (ID: %lld) missing left or right member for arrow\", id_);\n        } else {\n            const osm::Node *left_first = left_-&gt;nodes().front();\n            const osm::Node *right_first = right_-&gt;nodes().front();\n            geometry_msgs::msg::Point midpoint;\n            midpoint.x = (left_first-&gt;local_x() + right_first-&gt;local_x()) / 2;\n            midpoint.y = (left_first-&gt;local_y() + right_first-&gt;local_y()) / 2;\n            midpoint.z = 0.0;\n\n            if (left_-&gt;nodes().size() &gt; 1 &amp;&amp; right_-&gt;nodes().size() &gt; 1) {\n                const osm::Node *left_second = left_-&gt;nodes()[1];\n                const osm::Node *right_second = right_-&gt;nodes()[1];\n                double dir_x = ((left_second-&gt;local_x() + right_second-&gt;local_x()) / 2) - midpoint.x;\n                double dir_y = ((left_second-&gt;local_y() + right_second-&gt;local_y()) / 2) - midpoint.y;\n                double length = std::sqrt(dir_x * dir_x + dir_y * dir_y);\n                if (length != 0) {\n                    dir_x /= length;\n                    dir_y /= length;\n                }\n                // Reverse the direction.\n                dir_x = -dir_x;\n                dir_y = -dir_y;\n                geometry_msgs::msg::Point p1, p2, p3;\n                double arrow_size = 1.0;\n                p1.x = midpoint.x;\n                p1.y = midpoint.y;\n                p1.z = 0.0;\n                double perp_x = -dir_y;\n                double perp_y = dir_x;\n                p2.x = midpoint.x + arrow_size * dir_x + arrow_size * perp_x;\n                p2.y = midpoint.y + arrow_size * dir_y + arrow_size * perp_y;\n                p2.z = 0.0;\n                p3.x = midpoint.x + arrow_size * dir_x - arrow_size * perp_x;\n                p3.y = midpoint.y + arrow_size * dir_y - arrow_size * perp_y;\n                p3.z = 0.0;\n\n                one_way_arrow.points.push_back(p1);\n                one_way_arrow.points.push_back(p2);\n                one_way_arrow.points.push_back(p3);\n\n                marker_array.markers.push_back(one_way_arrow);\n            } else {\n                RCLCPP_WARN(rclcpp::get_logger(\"LaneletRelation\"), \"Relation (ID: %lld) has insufficient nodes for arrow\", id_);\n            }\n        }\n\n        return marker_array;\n    }\n\nprivate:\n    osm::Way* left_{nullptr};   \n    osm::Way* right_{nullptr};  \n    I64 speed_limit_{0};         \n    std::string location_;       \n    bool one_way_{false};        \n    std::string turn_direction_; \n\n    // --- Helper functions ---\n\n    static float mapval(float value, float istart, float iend, float ostart, float oend) {\n        return ostart + (oend - ostart) * ((value - istart) / (iend - istart));\n    }\n\n\n};\n\n} // namespace osm\n\n#endif // LANELET2_RVIZ2_RELATION_HPP\n</code></pre>"},{"location":"lanelet2_rviz2/map_8hpp/","title":"File map.hpp","text":"<p>FileList &gt; include &gt; lanelet2_rviz2 &gt; map.hpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"node.hpp\"</code></li> <li><code>#include \"Relation.hpp\"</code></li> </ul>"},{"location":"lanelet2_rviz2/map_8hpp/#namespaces","title":"Namespaces","text":"Type Name namespace osm"},{"location":"lanelet2_rviz2/map_8hpp/#classes","title":"Classes","text":"Type Name class Map <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/map.hpp</code></p>"},{"location":"lanelet2_rviz2/map_8hpp_source/","title":"File map.hpp","text":"<p>File List &gt; include &gt; lanelet2_rviz2 &gt; map.hpp</p> <p>Go to the documentation of this file</p> <pre><code>#ifndef LANELET2_RVIZ2__MAP_HPP\n#define LANELET2_RVIZ2__MAP_HPP\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include \"node.hpp\"\n#include \"Relation.hpp\"\n\nnamespace osm {\n\nclass Map {\npublic:\n    Map() = default;\n    Map(const Map&amp;) = default;\n    Map(Map&amp;&amp;) = default;\n    Map&amp; operator=(const Map&amp;) = default;\n    Map&amp; operator=(Map&amp;&amp;) = default;\n    ~Map() = default;\n\n    float xml_version;\n    std::string xml_encoding;\n    std::string osm_generator;\n\n    int metainfo_format_version;\n    std::string metainfo_map_version;\n\n    std::vector&lt;osm::Node*&gt; nodes;\n    std::vector&lt;osm::Way*&gt; ways;\n    std::vector&lt;osm::Relation*&gt; relations;\n\n}; \n}; // namespace osm\n#endif // LANELET2_RVIZ2__MAP_HPP\n</code></pre>"},{"location":"lanelet2_rviz2/mapelement_8hpp/","title":"File mapelement.hpp","text":"<p>FileList &gt; include &gt; lanelet2_rviz2 &gt; mapelement.hpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"node.hpp\"</code></li> </ul>"},{"location":"lanelet2_rviz2/mapelement_8hpp/#namespaces","title":"Namespaces","text":"Type Name namespace osm"},{"location":"lanelet2_rviz2/mapelement_8hpp/#classes","title":"Classes","text":"Type Name class MapElement Abstract base class for map elements. <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/mapelement.hpp</code></p>"},{"location":"lanelet2_rviz2/mapelement_8hpp_source/","title":"File mapelement.hpp","text":"<p>File List &gt; include &gt; lanelet2_rviz2 &gt; mapelement.hpp</p> <p>Go to the documentation of this file</p> <pre><code>#ifndef LANELET2_RVIZ2__MAPELEMENT_HPP\n#define LANELET2_RVIZ2__MAPELEMENT_HPP\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include \"node.hpp\"\n\nnamespace osm {\n\nclass MapElement {\npublic:\n    MapElement() = default;\n    MapElement(const MapElement&amp;) = default;\n    MapElement(MapElement&amp;&amp;) = default;\n    MapElement&amp; operator=(const MapElement&amp;) = default;\n    MapElement&amp; operator=(MapElement&amp;&amp;) = default;\n\n    virtual ~MapElement() = default;\n\n    virtual void draw() const = 0;\n\n}; \n}; // namespace osm\n#endif // LANELET2_RVIZ2__MAPELEMENT_HPP\n</code></pre>"},{"location":"lanelet2_rviz2/node_8hpp/","title":"File node.hpp","text":"<p>FileList &gt; include &gt; lanelet2_rviz2 &gt; node.hpp</p> <p>Go to the source code of this file</p>"},{"location":"lanelet2_rviz2/node_8hpp/#namespaces","title":"Namespaces","text":"Type Name namespace osm"},{"location":"lanelet2_rviz2/node_8hpp/#classes","title":"Classes","text":"Type Name class Node Class to store a single lanelet2 OSM node."},{"location":"lanelet2_rviz2/node_8hpp/#public-types","title":"Public Types","text":"Type Name typedef long long I64"},{"location":"lanelet2_rviz2/node_8hpp/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"lanelet2_rviz2/node_8hpp/#typedef-i64","title":"typedef I64","text":"<pre><code>using I64 =  long long;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/node.hpp</code></p>"},{"location":"lanelet2_rviz2/node_8hpp_source/","title":"File node.hpp","text":"<p>File List &gt; include &gt; lanelet2_rviz2 &gt; node.hpp</p> <p>Go to the documentation of this file</p> <pre><code>#ifndef LANELET2_RVIZ2__NODE_HPP\n#define LANELET2_RVIZ2__NODE_HPP\nusing I64 = long long;\n\n// example node:\n// &lt;node id=\"9209\" lat=\"45.13314197643\" lon=\"16.27647381026\"&gt;\n//   &lt;tag k=\"local_x\" v=\"372.3642\"/&gt;\n//   &lt;tag k=\"local_y\" v=\"-1466.5368\"/&gt;\n//   &lt;tag k=\"ele\" v=\"-1.6\"/&gt;\n// &lt;/node&gt;\n\nnamespace osm {\n\nclass Node {\npublic:\n    Node(const Node&amp;) = default;\n    Node(Node&amp;&amp;) = default;\n    Node&amp; operator=(const Node&amp;) = default;\n    Node&amp; operator=(Node&amp;&amp;) = default;\n    ~Node() = default;\n\n    Node(I64 id, double lat, double lon, double local_x, double local_y, double ele)\n        : id_(id), lat_(lat), lon_(lon), local_x_(local_x), local_y_(local_y), ele_(ele) {}\n\n    I64 id() const { return id_; }\n    double lat() const { return lat_; }\n    double lon() const { return lon_; }\n    double local_x() const { return local_x_; }\n    double local_y() const { return local_y_; }\n    double ele() const { return ele_; }\n\n    void set_local_x(double local_x) { local_x_ = local_x; }\n    void set_local_y(double local_y) { local_y_ = local_y; }\n\nprivate:\n    I64 id_;\n    double lat_;\n    double lon_;\n    double local_x_;\n    double local_y_;\n    double ele_;\n};\n}  // namespace osm\n\n\n\n#endif  // LANELET2_RVIZ2__NODE_HPP\n</code></pre>"},{"location":"lanelet2_rviz2/oldrelation_8hpp/","title":"File oldrelation.hpp","text":"<p>FileList &gt; include &gt; lanelet2_rviz2 &gt; oldrelation.hpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"way.hpp\"</code></li> </ul>"},{"location":"lanelet2_rviz2/oldrelation_8hpp/#namespaces","title":"Namespaces","text":"Type Name namespace osm"},{"location":"lanelet2_rviz2/oldrelation_8hpp/#classes","title":"Classes","text":"Type Name class Relation Class to store a single lanelet2 OSM relation, which is a part of a street. struct Member"},{"location":"lanelet2_rviz2/oldrelation_8hpp/#public-types","title":"Public Types","text":"Type Name typedef long long I64"},{"location":"lanelet2_rviz2/oldrelation_8hpp/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"lanelet2_rviz2/oldrelation_8hpp/#typedef-i64","title":"typedef I64","text":"<pre><code>using I64 =  long long;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/oldrelation.hpp</code></p>"},{"location":"lanelet2_rviz2/oldrelation_8hpp_source/","title":"File oldrelation.hpp","text":"<p>File List &gt; include &gt; lanelet2_rviz2 &gt; oldrelation.hpp</p> <p>Go to the documentation of this file</p> <pre><code>#ifndef LANELET2_RVIZ2__RELATION_HPP\n#define LANELET2_RVIZ2__RELATION_HPP\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include \"way.hpp\"\nusing I64 = long long;\n\n// exmaple relation\n//   &lt;relation id=\"12895\"&gt;\n//     &lt;member type=\"way\" role=\"left\" ref=\"12888\"/&gt;\n//     &lt;member type=\"way\" role=\"right\" ref=\"12887\"/&gt;\n//     &lt;tag k=\"type\" v=\"lanelet\"/&gt;\n//     &lt;tag k=\"subtype\" v=\"road\"/&gt;\n//     &lt;tag k=\"speed_limit\" v=\"50\"/&gt;\n//     &lt;tag k=\"location\" v=\"urban\"/&gt;\n//     &lt;tag k=\"one_way\" v=\"yes\"/&gt;\n//   &lt;/relation&gt;\n\nnamespace osm {\n\nclass Relation {\npublic:\n    Relation(const Relation&amp;) = default;\n    Relation(Relation&amp;&amp;) = default;\n    Relation&amp; operator=(const Relation&amp;) = default;\n    Relation&amp; operator=(Relation&amp;&amp;) = default;\n    ~Relation() = default;\n\n    struct Member {\n        std::string type;\n        std::string role;\n        I64 ref;\n    };\n\n    // constructor to fill all fields\n    Relation(I64 id) : id_(id) { }\n\n\n    I64 id() const { return id_; }\n    Way* left() const { return left_; }\n    Way* right() const { return right_; }\n    std::string type() const { return type_; }\n    std::string subtype() const { return subtype_; }\n    I64 speed_limit() const { return speed_limit_; }\n    std::string location() const { return location_; }\n    bool one_way() const { return one_way_; }\n\n\n\n\n    // Set the vector of members parsed from the OSM file\n    void set_members(const std::vector&lt;Member&gt;&amp; members) {\n        members_ = members;\n    }\n\n    // (Optional) Getter for the members vector\n    const std::vector&lt;Member&gt;&amp; members() const {\n        return members_;\n    }\n\n    // Add a tag key/value pair to this relation\n    void add_tag(const std::string &amp;key, const std::string &amp;value) {\n        tags_[key] = value;\n    }\n\n    // (Optional) Getter for tags\n    const std::map&lt;std::string, std::string&gt;&amp; tags() const {\n        return tags_;\n    }\n\n    // (Optional) Helper to get a member by role\n    osm::Way* getMemberByRole(const std::string &amp;role, const std::map&lt;I64, osm::Way*&gt;&amp; ways) const {\n        for (const auto &amp;m : members_) {\n            if (m.role == role &amp;&amp; ways.count(m.ref)) {\n                return ways.at(m.ref);\n            }\n        }\n        return nullptr;\n    }\n\nprivate:\n    I64 id_;\n    osm::Way* left_;\n    osm::Way* right_;\n\n    std::string type_;\n    std::string subtype_;\n    I64 speed_limit_;\n    std::string location_;\n    bool one_way_;   \n\n\n    std::vector&lt;Member&gt; members_;\n    std::map&lt;std::string, std::string&gt; tags_;\n\n};\n}; // namespace osm\n\n#endif  // LANELET2_RVIZ2__RELATION_HPP\n</code></pre>"},{"location":"lanelet2_rviz2/parse__osm_8hpp/","title":"File parse_osm.hpp","text":"<p>FileList &gt; include &gt; lanelet2_rviz2 &gt; parse_osm.hpp</p> <p>Go to the source code of this file</p> <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/parse_osm.hpp</code></p>"},{"location":"lanelet2_rviz2/parse__osm_8hpp_source/","title":"File parse_osm.hpp","text":"<p>File List &gt; include &gt; lanelet2_rviz2 &gt; parse_osm.hpp</p> <p>Go to the documentation of this file</p> <pre><code>// #ifndef LANELET2_RVIZ2__PARSE_OSM_HPP\n// #define LANELET2_RVIZ2__PARSE_OSM_HPP\n\n// #include &lt;map&gt;\n// #include &lt;vector&gt;\n// #include &lt;string&gt;\n// #include &lt;file&gt;\n// #include \"rapidxml.hpp\"\n// #include \"rapidxml_utils.hpp\"\n\n// #include \"OSMVisualizer.hpp\"\n// #include \"node.hpp\"\n// #include \"way.hpp\"\n// #include \"Relation.hpp\"\n\n\n\n\n\n// #endif  // LANELET2_RVIZ2__WAY_HPP\n</code></pre>"},{"location":"lanelet2_rviz2/triangulate__polygon_8hpp/","title":"File triangulate_polygon.hpp","text":"<p>FileList &gt; include &gt; lanelet2_rviz2 &gt; triangulate_polygon.hpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;geometry_msgs/msg/point32.hpp&gt;</code></li> <li><code>#include &lt;visualization_msgs/msg/marker_array.hpp&gt;</code></li> <li><code>#include &lt;rclcpp/rclcpp.hpp&gt;</code></li> <li><code>#include \"lanelet2_rviz2/earcut.hpp\"</code></li> </ul>"},{"location":"lanelet2_rviz2/triangulate__polygon_8hpp/#public-functions","title":"Public Functions","text":"Type Name visualization_msgs::msg::Marker triangulatePolygon (const geometry_msgs::msg::PolygonStamped &amp; polygon, double r, double g, double b, double a, I64 id) Triangulates a polygon to produce a Marker message."},{"location":"lanelet2_rviz2/triangulate__polygon_8hpp/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"lanelet2_rviz2/triangulate__polygon_8hpp/#function-triangulatepolygon","title":"function triangulatePolygon","text":"<p>Triangulates a polygon to produce a Marker message. <pre><code>inline visualization_msgs::msg::Marker triangulatePolygon (\n    const geometry_msgs::msg::PolygonStamped &amp; polygon,\n    double r,\n    double g,\n    double b,\n    double a,\n    I64 id\n) \n</code></pre></p> <p>This is a stub for your own triangulation routine.</p> <p>Parameters:</p> <ul> <li><code>polygon</code> The input polygon. </li> <li><code>r</code> Color red component. </li> <li><code>g</code> Color green component. </li> <li><code>b</code> Color blue component. </li> <li><code>a</code> Color alpha component. </li> <li><code>id</code> Unique marker id. </li> </ul> <p>Returns:</p> <p>A Marker message representing the triangulated polygon. </p> <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/triangulate_polygon.hpp</code></p>"},{"location":"lanelet2_rviz2/triangulate__polygon_8hpp_source/","title":"File triangulate_polygon.hpp","text":"<p>File List &gt; include &gt; lanelet2_rviz2 &gt; triangulate_polygon.hpp</p> <p>Go to the documentation of this file</p> <pre><code>#ifndef LANELET2_RVIZ2_TRIANGULATE_POLYGON_HPP\n#define LANELET2_RVIZ2_TRIANGULATE_POLYGON_HPP\n\n#include &lt;geometry_msgs/msg/point32.hpp&gt;\n#include &lt;visualization_msgs/msg/marker_array.hpp&gt;\n#include &lt;rclcpp/rclcpp.hpp&gt;\n#include \"lanelet2_rviz2/earcut.hpp\"\n\n\ninline visualization_msgs::msg::Marker triangulatePolygon(\n    const geometry_msgs::msg::PolygonStamped &amp;polygon,\n    double r, double g, double b, double a, I64 id)\n{\n    visualization_msgs::msg::Marker triangle_marker;\n\n    if (polygon.polygon.points.size() &lt; 3)\n    {\n        RCLCPP_WARN(rclcpp::get_logger(\"triangulator\"), \"Polygon has less than 3 points; cannot triangulate.\");\n        return triangle_marker;\n    }\n\n    // Set up the marker properties.\n    triangle_marker.header = polygon.header;\n    triangle_marker.ns = \"triangulated_polygon\";\n    triangle_marker.id = id;\n    triangle_marker.type = visualization_msgs::msg::Marker::TRIANGLE_LIST;\n    triangle_marker.action = visualization_msgs::msg::Marker::ADD;\n\n    triangle_marker.scale.x = 1.0;\n    triangle_marker.scale.y = 1.0;\n    triangle_marker.scale.z = 1.0;\n\n    triangle_marker.color.r = r;\n    triangle_marker.color.g = g;\n    triangle_marker.color.b = b;\n    triangle_marker.color.a = a;\n\n    // Prepare input for Earcut.\n    using Coord = double;\n    std::vector&lt;std::vector&lt;std::array&lt;Coord, 2&gt;&gt;&gt; polygon_coords;\n    std::vector&lt;std::array&lt;Coord, 2&gt;&gt; ring;\n    for (const auto &amp;point : polygon.polygon.points)\n    {\n        ring.push_back({point.x, point.y});\n    }\n    polygon_coords.push_back(ring);\n\n    // Perform triangulation.\n    std::vector&lt;uint32_t&gt; indices = mapbox::earcut&lt;uint32_t&gt;(polygon_coords);\n\n    // Convert Earcut output into Marker points.\n    const auto &amp;vertices = polygon_coords[0];\n    for (size_t i = 0; i &lt; indices.size(); i += 3)\n    {\n        for (int j = 0; j &lt; 3; ++j)\n        {\n            geometry_msgs::msg::Point p;\n            p.x = vertices[indices[i + j]][0];\n            p.y = vertices[indices[i + j]][1];\n            p.z = 0.0; // Assuming 2D polygon in the XY plane.\n            triangle_marker.points.push_back(p);\n        }\n    }\n\n    return triangle_marker;\n}\n\n#endif // LANELET2_RVIZ2_TRIANGULATE_POLYGON_HPP\n</code></pre>"},{"location":"lanelet2_rviz2/way_8hpp/","title":"File way.hpp","text":"<p>FileList &gt; include &gt; lanelet2_rviz2 &gt; way.hpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"node.hpp\"</code></li> </ul>"},{"location":"lanelet2_rviz2/way_8hpp/#namespaces","title":"Namespaces","text":"Type Name namespace osm"},{"location":"lanelet2_rviz2/way_8hpp/#classes","title":"Classes","text":"Type Name class Way Class to store a single lanelet2 OSM way, which is a collection of nodes."},{"location":"lanelet2_rviz2/way_8hpp/#public-types","title":"Public Types","text":"Type Name typedef long long I64"},{"location":"lanelet2_rviz2/way_8hpp/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"lanelet2_rviz2/way_8hpp/#typedef-i64","title":"typedef I64","text":"<pre><code>using I64 =  long long;\n</code></pre> <p>The documentation for this class was generated from the following file <code>include/lanelet2_rviz2/way.hpp</code></p>"},{"location":"lanelet2_rviz2/way_8hpp_source/","title":"File way.hpp","text":"<p>File List &gt; include &gt; lanelet2_rviz2 &gt; way.hpp</p> <p>Go to the documentation of this file</p> <pre><code>#ifndef LANELET2_RVIZ2__WAY_HPP\n#define LANELET2_RVIZ2__WAY_HPP\n#include &lt;vector&gt;\n#include \"node.hpp\"\nusing I64 = long long;\n\n// example way:\n//   &lt;way id=\"11340\"&gt;\n//     &lt;nd ref=\"9449\"/&gt;\n//     &lt;nd ref=\"11344\"/&gt;\n\n//     &lt;nd ref=\"11370\"/&gt;\n//     &lt;nd ref=\"11372\"/&gt;\n//   &lt;/way&gt;\n\nnamespace osm {\n\nclass Way {\npublic:\n    Way(const Way&amp;) = default;\n    Way(Way&amp;&amp;) = default;\n    Way&amp; operator=(const Way&amp;) = default;\n    Way&amp; operator=(Way&amp;&amp;) = default;\n    ~Way() = default;\n\n    Way(I64 id) : id_(id) {}\n\n    I64 id() const { return id_; }\n\n    void add_node(osm::Node* node) { nodes_.push_back(node); }\n\n    const std::vector&lt;osm::Node*&gt;&amp; nodes() const { return nodes_; }\n\n    // Method to add a tag to this way\n    void add_tag(const std::string &amp;key, const std::string &amp;value) {\n        tags_[key] = value;\n    }\n\n    // (Optional) Getter to access tags\n    const std::map&lt;std::string, std::string&gt;&amp; tags() const {\n        return tags_;\n    }\n\nprivate:\n    I64 id_;\n    std::vector&lt;osm::Node*&gt; nodes_;\n\n    std::map&lt;std::string, std::string&gt; tags_;\n};\n\n}; // namespace osm\n\n#endif  // LANELET2_RVIZ2__WAY_HPP\n</code></pre>"},{"location":"lanelet2_rviz2/dir_68267d1309a1af8e8297ef4c3efbcdba/","title":"Dir src","text":"<p>FileList &gt; src</p>"},{"location":"lanelet2_rviz2/dir_68267d1309a1af8e8297ef4c3efbcdba/#files","title":"Files","text":"Type Name file OSMVisualizer.cpp file main.cpp <p>The documentation for this class was generated from the following file <code>src/</code></p>"},{"location":"lanelet2_rviz2/OSMVisualizer_8cpp/","title":"File OSMVisualizer.cpp","text":"<p>FileList &gt; src &gt; OSMVisualizer.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"lanelet2_rviz2/OSMVisualizer.hpp\"</code></li> <li><code>#include \"lanelet2_rviz2/node.hpp\"</code></li> <li><code>#include \"lanelet2_rviz2/way.hpp\"</code></li> <li><code>#include \"lanelet2_rviz2/Relation.hpp\"</code></li> <li><code>#include \"lanelet2_rviz2/rapidxml.hpp\"</code></li> <li><code>#include \"lanelet2_rviz2/rapidxml_utils.hpp\"</code></li> <li><code>#include &lt;cmath&gt;</code></li> <li><code>#include &lt;exception&gt;</code></li> <li><code>#include &lt;stdexcept&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;array&gt;</code></li> <li><code>#include &lt;chrono&gt;</code></li> <li><code>#include &lt;geometry_msgs/msg/point32.hpp&gt;</code></li> <li><code>#include &lt;visualization_msgs/msg/marker_array.hpp&gt;</code></li> </ul>"},{"location":"lanelet2_rviz2/OSMVisualizer_8cpp/#namespaces","title":"Namespaces","text":"Type Name namespace chrono_literals <p>The documentation for this class was generated from the following file <code>src/OSMVisualizer.cpp</code></p>"},{"location":"lanelet2_rviz2/OSMVisualizer_8cpp_source/","title":"File OSMVisualizer.cpp","text":"<p>File List &gt; src &gt; OSMVisualizer.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"lanelet2_rviz2/OSMVisualizer.hpp\"\n#include \"lanelet2_rviz2/node.hpp\"\n#include \"lanelet2_rviz2/way.hpp\"\n#include \"lanelet2_rviz2/Relation.hpp\"\n\n\n#include \"lanelet2_rviz2/rapidxml.hpp\"\n#include \"lanelet2_rviz2/rapidxml_utils.hpp\"\n\n#include &lt;cmath&gt;\n#include &lt;exception&gt;\n#include &lt;stdexcept&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;array&gt;\n#include &lt;chrono&gt;\n\n// ROS message includes for header stamp types\n#include &lt;geometry_msgs/msg/point32.hpp&gt;\n#include &lt;visualization_msgs/msg/marker_array.hpp&gt;\n\n// Using the chrono literals is convenient in the implementation.\nusing namespace std::chrono_literals;\n\nOSMVisualizer::OSMVisualizer()\n    : Node(\"osm_visualizer\")\n{\n    // Declare and get parameters\n    this-&gt;declare_parameter&lt;double&gt;(\"line_width\", 0.8);\n    this-&gt;declare_parameter&lt;std::string&gt;(\"frame_id\", \"map_gyor_0\");\n    this-&gt;declare_parameter&lt;std::string&gt;(\"osm_filename\", \"\");\n    this-&gt;declare_parameter&lt;bool&gt;(\"center_map\", false);\n    this-&gt;declare_parameter&lt;double&gt;(\"speed_color_max\", 90.0);\n\n    this-&gt;get_parameter(\"line_width\", line_width_);\n    this-&gt;get_parameter(\"frame_id\", frame_id_);\n    this-&gt;get_parameter(\"osm_filename\", filename_);\n    this-&gt;get_parameter(\"center_map\", center_map_);\n    this-&gt;get_parameter(\"speed_color_max\", speed_color_max_);\n\n    // Register parameter callback\n    on_set_parameters_callback_handle_ = this-&gt;add_on_set_parameters_callback(\n        std::bind(&amp;OSMVisualizer::parametersCallback, this, std::placeholders::_1));\n\n    // Create publisher for marker arrays (relations, speed, one-way arrows)\n    marker_array_relations_pub_ =\n        this-&gt;create_publisher&lt;visualization_msgs::msg::MarkerArray&gt;(\"osm_relations\", 10);\n\n    // Load and parse the OSM file if provided\n    if (!filename_.empty())\n    {\n        try\n        {\n            parseOSMFile(filename_.c_str());\n            if (center_map_)\n            {\n                centerCoordinates();\n            }\n            data_loaded_ = true;\n        }\n        catch (const std::exception &amp;e)\n        {\n            RCLCPP_ERROR(this-&gt;get_logger(), \"Failed to parse OSM file: %s\", e.what());\n        }\n    }\n    else\n    {\n        RCLCPP_ERROR(this-&gt;get_logger(), \"OSM filename parameter is empty.\");\n    }\n\n    // Create a timer to republish markers every second\n    timer_ = this-&gt;create_wall_timer(\n        std::chrono::seconds(1),\n        std::bind(&amp;OSMVisualizer::publishMarkers, this));\n\n    RCLCPP_INFO(this-&gt;get_logger(), \"OSM Visualizer node started.\");\n}\n\nvoid OSMVisualizer::publishMarkers()\n{\n    if (!data_loaded_)\n    {\n        RCLCPP_WARN(this-&gt;get_logger(), \"No data loaded. Skipping marker publication.\");\n        return;\n    }\n\n    visualization_msgs::msg::MarkerArray marker_array;\n\n\n    // virtual visualization_msgs::msg::MarkerArray draw(const std::string &amp;frame_id,\n    //                                                 const rclcpp::Time &amp;stamp,\n    //                                                 int &amp;marker_id,\n    //                                                 double line_width,\n    //                                                 double speed_color_max) const = 0;\n    // Iterate through relations and add markers to the array\n    RCLCPP_INFO(this-&gt;get_logger(), \"Drawing relations\");\n    for (const auto &amp;relation_pair : relations_)\n    {\n        osm::Relation *relation = relation_pair.second;\n        if (relation)\n        {\n            int marker_id = 0;\n            auto markers = relation-&gt;draw(frame_id_, this-&gt;now(), marker_id, line_width_, speed_color_max_);\n            marker_array.markers.insert(marker_array.markers.end(), markers.markers.begin(), markers.markers.end());\n            RCLCPP_INFO(this-&gt;get_logger(), \"drawing\");\n        }\n        RCLCPP_INFO(this-&gt;get_logger(), \"not drawing\");\n\n    }\n\n    // Publish the marker array\n    RCLCPP_INFO(this-&gt;get_logger(), \"Publishing marker array with %zu markers\", marker_array.markers.size());\n    marker_array_relations_pub_-&gt;publish(marker_array);\n}\n\nrcl_interfaces::msg::SetParametersResult OSMVisualizer::parametersCallback(\n    const std::vector&lt;rclcpp::Parameter&gt; &amp;parameters)\n{\n    rcl_interfaces::msg::SetParametersResult result;\n    result.successful = true;\n    result.reason = \"success\";\n\n    for (const auto &amp;param : parameters)\n    {\n        RCLCPP_INFO(this-&gt;get_logger(), \"Parameter updated: %s = %s\",\n                    param.get_name().c_str(), param.value_to_string().c_str());\n\n        if (param.get_name() == \"line_width\")\n        {\n            line_width_ = param.as_double();\n        }\n        else if (param.get_name() == \"frame_id\")\n        {\n            frame_id_ = param.as_string();\n        }\n        else if (param.get_name() == \"osm_filename\")\n        {\n            filename_ = param.as_string();\n            try\n            {\n                parseOSMFile(filename_.c_str());\n                if (center_map_)\n                {\n                    centerCoordinates();\n                }\n                data_loaded_ = true;\n            }\n            catch (const std::exception &amp;e)\n            {\n                RCLCPP_ERROR(this-&gt;get_logger(), \"Failed to parse OSM file: %s\", e.what());\n                result.successful = false;\n                result.reason = \"Failed to parse OSM file\";\n            }\n        }\n        else if (param.get_name() == \"center_map\")\n        {\n            center_map_ = param.as_bool();\n            if (center_map_)\n            {\n                centerCoordinates();\n            }\n        }\n        else if (param.get_name() == \"speed_color_max\")\n        {\n            speed_color_max_ = param.as_double();\n        }\n    }\n\n    return result;\n}\n\n\n\nvoid OSMVisualizer::centerCoordinates()\n{\n    // Calculate the centroid of the map.\n    double sum_x = 0.0;\n    double sum_y = 0.0;\n    size_t node_count = nodes_.size();\n\n    for (const auto &amp;node_pair : nodes_)\n    {\n        osm::Node *node = node_pair.second;\n        sum_x += node-&gt;local_x();\n        sum_y += node-&gt;local_y();\n    }\n\n    if (node_count &gt; 0)\n    {\n        center_x_ = sum_x / node_count;\n        center_y_ = sum_y / node_count;\n    }\n\n    // Translate all nodes to center the map.\n    for (auto &amp;node_pair : nodes_)\n    {\n        osm::Node *node = node_pair.second;\n        node-&gt;set_local_x(node-&gt;local_x() - center_x_);\n        node-&gt;set_local_y(node-&gt;local_y() - center_y_);\n    }\n\n    RCLCPP_INFO(this-&gt;get_logger(), \"Map centered at (%.2f, %.2f)\", center_x_, center_y_);\n}\n\nfloat OSMVisualizer::mapval(float x, float in_min, float in_max, float out_min, float out_max) const\n{\n    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\n\nvoid OSMVisualizer::clearData()\n{\n    for (auto &amp;pair : nodes_)\n    {\n        delete pair.second;\n    }\n    nodes_.clear();\n\n    for (auto &amp;pair : ways_)\n    {\n        delete pair.second;\n    }\n    ways_.clear();\n\n    for (auto &amp;pair : relations_)\n    {\n        delete pair.second;\n    }\n    relations_.clear();\n}\n\n\nvoid OSMVisualizer::parseOSMFile(const char* filename) {\n        // Clear previously loaded data\n        clearData();\n\n        rapidxml::file&lt;&gt; xmlFile(filename);\n        rapidxml::xml_document&lt;&gt; doc;\n        doc.parse&lt;0&gt;(xmlFile.data());\n\n        rapidxml::xml_node&lt;&gt;* root = doc.first_node(\"osm\");\n\n        bool lat_lon_warning_issued = false;\n\n        for (rapidxml::xml_node&lt;&gt;* node = root-&gt;first_node(\"node\"); node; node = node-&gt;next_sibling(\"node\")) {\n            I64 id = std::stoll(node-&gt;first_attribute(\"id\")-&gt;value());\n            double lat = 0, lon = 0, local_x = 0, local_y = 0, ele = 0;\n\n            try {\n                if (node-&gt;first_attribute(\"lat\") &amp;&amp; node-&gt;first_attribute(\"lon\")) {\n                    lat = std::stod(node-&gt;first_attribute(\"lat\")-&gt;value());\n                    lon = std::stod(node-&gt;first_attribute(\"lon\")-&gt;value());\n                } else {\n                    if (!lat_lon_warning_issued) {\n                        RCLCPP_WARN(rclcpp::get_logger(\"node_parser\"), \"Some nodes have missing latitude or I64itude attributes. Defaulting to 0 for such nodes.\");\n                        lat_lon_warning_issued = true;\n                    }\n                }\n            } catch (const std::exception&amp; e) {\n                if (!lat_lon_warning_issued) {\n                    RCLCPP_WARN(rclcpp::get_logger(\"node_parser\"), \"Some nodes have malformed latitude or I64itude attributes. Defaulting to 0 for such nodes.\");\n                    lat_lon_warning_issued = true;\n                }\n                lat = 0;\n                lon = 0;\n            }\n\n            // Parse tags: Only convert values for keys that should be numeric.\n            for (rapidxml::xml_node&lt;&gt;* tag = node-&gt;first_node(\"tag\"); tag; tag = tag-&gt;next_sibling(\"tag\")) {\n                std::string key = tag-&gt;first_attribute(\"k\")-&gt;value();\n                // Only process numeric tags\n                if (key == \"local_x\" || key == \"local_y\" || key == \"ele\") {\n                    try {\n                        double value = std::stod(tag-&gt;first_attribute(\"v\")-&gt;value());\n                        if (key == \"local_x\") {\n                            local_x = value;\n                        } else if (key == \"local_y\") {\n                            local_y = value;\n                        } else if (key == \"ele\") {\n                            ele = value;\n                        }\n                    } catch (const std::exception &amp;e) {\n                        RCLCPP_WARN(this-&gt;get_logger(), \"Failed to parse numeric tag %s with value %s: %s\",\n                                    key.c_str(), tag-&gt;first_attribute(\"v\")-&gt;value(), e.what());\n                    }\n                }\n            }\n\n\n            osm::Node* newNode = new osm::Node(id, lat, lon, local_x, local_y, ele);\n            nodes_[id] = newNode;\n        }\n\n        // Parse ways\n        for (rapidxml::xml_node&lt;&gt;* wayNode = root-&gt;first_node(\"way\"); wayNode; wayNode = wayNode-&gt;next_sibling(\"way\")) {\n            I64 id = std::stoll(wayNode-&gt;first_attribute(\"id\")-&gt;value());\n            osm::Way* way = new osm::Way(id);\n\n            // Parse nd references\n            for (rapidxml::xml_node&lt;&gt;* nd = wayNode-&gt;first_node(\"nd\"); nd; nd = nd-&gt;next_sibling(\"nd\")) {\n                I64 ref = std::stoll(nd-&gt;first_attribute(\"ref\")-&gt;value());\n                if (nodes_.count(ref)) {\n                    way-&gt;add_node(nodes_[ref]);\n                }\n            }\n\n            bool isline_thin = false;\n\n            // Parse and store additional &lt;tag&gt; elements for this way\n            for (rapidxml::xml_node&lt;&gt;* tag = wayNode-&gt;first_node(\"tag\"); tag; tag = tag-&gt;next_sibling(\"tag\")) {\n                std::string key = tag-&gt;first_attribute(\"k\")-&gt;value();\n                std::string value = tag-&gt;first_attribute(\"v\")-&gt;value();\n                if (key == \"type\" &amp;&amp; value == \"line_thin\") {\n                    isline_thin = true;\n                }\n                way-&gt;add_tag(key, value);\n            }\n\n\n            // if &lt;tag k=\"type\" v=\"line_thin\"/&gt; add it to the list, otherwise don't\n            if (isline_thin) {\n                ways_[id] = way;\n            } // TODO add other types, like parking spaces\n\n        }\n\n        osm::Relation::Member mem;\n\n        // Parse relations\n        for (rapidxml::xml_node&lt;&gt;* relationNode = root-&gt;first_node(\"relation\"); relationNode; relationNode = relationNode-&gt;next_sibling(\"relation\")) {\n            I64 id = std::stoll(relationNode-&gt;first_attribute(\"id\")-&gt;value());\n\n            // Create a vector to hold all relation members\n            std::vector&lt;osm::Relation::Member&gt; members;\n            for (rapidxml::xml_node&lt;&gt;* member = relationNode-&gt;first_node(\"member\"); member; member = member-&gt;next_sibling(\"member\")) {\n                mem.type = member-&gt;first_attribute(\"type\")-&gt;value();\n                mem.role = member-&gt;first_attribute(\"role\")-&gt;value();\n                mem.ref = std::stoll(member-&gt;first_attribute(\"ref\")-&gt;value());\n                members.push_back(mem);\n            }\n\n            if (mem.type == \"lanelet\") {\n                // Create the relation object\n                osm::LaneletRelation* relation = new osm::LaneletRelation(id);\n                relation-&gt;set_members(members);\n\n                // Parse and store all tags for this relation\n                for (rapidxml::xml_node&lt;&gt;* tag = relationNode-&gt;first_node(\"tag\"); tag; tag = tag-&gt;next_sibling(\"tag\")) {\n                    std::string key = tag-&gt;first_attribute(\"k\")-&gt;value();\n                    std::string value = tag-&gt;first_attribute(\"v\")-&gt;value();\n                    relation-&gt;add_tag(key, value);\n                }\n\n                relations_[id] = relation; \n            } // TODO g\u00e1nyol\u00e1s megsz\u0171ntet\u00e9se\n\n\n        }\n\n\n    }\n</code></pre>"},{"location":"lanelet2_rviz2/main_8cpp/","title":"File main.cpp","text":"<p>FileList &gt; src &gt; main.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"rclcpp/rclcpp.hpp\"</code></li> <li><code>#include \"std_msgs/msg/string.hpp\"</code></li> <li><code>#include \"visualization_msgs/msg/marker_array.hpp\"</code></li> <li><code>#include \"visualization_msgs/msg/marker.hpp\"</code></li> <li><code>#include &lt;map&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include &lt;numeric&gt;</code></li> <li><code>#include \"geometry_msgs/msg/polygon_stamped.hpp\"</code></li> <li><code>#include \"geometry_msgs/msg/polygon.hpp\"</code></li> <li><code>#include \"geometry_msgs/msg/point32.hpp\"</code></li> <li><code>#include \"lanelet2_rviz2/rapidxml.hpp\"</code></li> <li><code>#include \"lanelet2_rviz2/rapidxml_utils.hpp\"</code></li> <li><code>#include \"lanelet2_rviz2/node.hpp\"</code></li> <li><code>#include \"lanelet2_rviz2/way.hpp\"</code></li> <li><code>#include \"lanelet2_rviz2/Relation.hpp\"</code></li> <li><code>#include \"lanelet2_rviz2/earcut.hpp\"</code></li> <li><code>#include \"lanelet2_rviz2/OSMVisualizer.hpp\"</code></li> </ul>"},{"location":"lanelet2_rviz2/main_8cpp/#public-functions","title":"Public Functions","text":"Type Name int main (int argc, char ** argv)"},{"location":"lanelet2_rviz2/main_8cpp/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"lanelet2_rviz2/main_8cpp/#function-main","title":"function main","text":"<pre><code>int main (\n    int argc,\n    char ** argv\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/main.cpp</code></p>"},{"location":"lanelet2_rviz2/main_8cpp_source/","title":"File main.cpp","text":"<p>File List &gt; src &gt; main.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include \"rclcpp/rclcpp.hpp\"\n#include \"std_msgs/msg/string.hpp\"\n#include \"visualization_msgs/msg/marker_array.hpp\"\n#include \"visualization_msgs/msg/marker.hpp\"\n#include &lt;map&gt;\n#include &lt;vector&gt;\n#include &lt;numeric&gt;\n#include \"geometry_msgs/msg/polygon_stamped.hpp\"\n#include \"geometry_msgs/msg/polygon.hpp\"\n#include \"geometry_msgs/msg/point32.hpp\"\n\n#include \"lanelet2_rviz2/rapidxml.hpp\"\n#include \"lanelet2_rviz2/rapidxml_utils.hpp\"\n#include \"lanelet2_rviz2/node.hpp\"\n#include \"lanelet2_rviz2/way.hpp\"\n#include \"lanelet2_rviz2/Relation.hpp\"\n#include \"lanelet2_rviz2/earcut.hpp\"\n#include \"lanelet2_rviz2/OSMVisualizer.hpp\"\n\n\n\n\nint main(int argc, char ** argv) {\n    rclcpp::init(argc, argv);\n    auto node = std::make_shared &lt; OSMVisualizer &gt; ();\n    rclcpp::spin(node);\n    rclcpp::shutdown();\n    return 0;\n}\n</code></pre>"},{"location":"lanelet2_rviz2/namespaces/","title":"Namespace List","text":"<p>Here is a list of all namespaces with brief descriptions:</p> <ul> <li>namespace osm </li> <li>namespace rclcpp </li> <li>namespace chrono_literals </li> </ul>"},{"location":"lanelet2_rviz2/classes/","title":"Class Index","text":""},{"location":"lanelet2_rviz2/classes/#l","title":"l","text":"<ul> <li>LaneletRelation (osm)</li> </ul>"},{"location":"lanelet2_rviz2/classes/#m","title":"m","text":"<ul> <li>Map (osm)</li> <li>MapElement (osm)</li> <li>Member (osm::Relation)</li> </ul>"},{"location":"lanelet2_rviz2/classes/#n","title":"n","text":"<ul> <li>Node (osm)</li> </ul>"},{"location":"lanelet2_rviz2/classes/#o","title":"o","text":"<ul> <li>OSMVisualizer</li> </ul>"},{"location":"lanelet2_rviz2/classes/#r","title":"r","text":"<ul> <li>Relation (osm)</li> </ul>"},{"location":"lanelet2_rviz2/classes/#w","title":"w","text":"<ul> <li>Way (osm)</li> </ul>"},{"location":"lanelet2_rviz2/hierarchy/","title":"Class Hierarchy","text":"<p>This inheritance list is sorted roughly, but not completely, alphabetically:</p> <ul> <li>class osm::Relation Class to store a single lanelet2 OSM relation, which is a part of a street. <ul> <li>class osm::LaneletRelation Class representing a lanelet relation. </li> </ul> </li> <li>class osm::Map </li> <li>class osm::MapElement Abstract base class for map elements. </li> <li>class osm::Node Class to store a single lanelet2 OSM node. </li> <li>class osm::Way Class to store a single lanelet2 OSM way, which is a collection of nodes. </li> <li>struct osm::Relation::Member </li> <li>class rclcpp::Node <ul> <li>class OSMVisualizer </li> </ul> </li> </ul>"},{"location":"lanelet2_rviz2/modules/","title":"Modules","text":"<p>No modules found.</p>"},{"location":"lanelet2_rviz2/pages/","title":"Related Pages","text":"<p>Here is a list of all related documentation pages:</p>"},{"location":"lanelet2_rviz2/class_members/","title":"Class Members","text":""},{"location":"lanelet2_rviz2/class_members/#a","title":"a","text":"<ul> <li>add_tag (osm::Relation, osm::Way)</li> <li>add_node (osm::Way)</li> </ul>"},{"location":"lanelet2_rviz2/class_members/#c","title":"c","text":"<ul> <li>centerCoordinates (OSMVisualizer)</li> <li>center_map_ (OSMVisualizer)</li> <li>center_x_ (OSMVisualizer)</li> <li>center_y_ (OSMVisualizer)</li> <li>clearData (OSMVisualizer)</li> </ul>"},{"location":"lanelet2_rviz2/class_members/#d","title":"d","text":"<ul> <li>data_loaded_ (OSMVisualizer)</li> <li>draw (osm::LaneletRelation, osm::MapElement, osm::Relation)</li> </ul>"},{"location":"lanelet2_rviz2/class_members/#e","title":"e","text":"<ul> <li>ele (osm::Node)</li> <li>ele_ (osm::Node)</li> </ul>"},{"location":"lanelet2_rviz2/class_members/#f","title":"f","text":"<ul> <li>filename_ (OSMVisualizer)</li> <li>frame_id_ (OSMVisualizer)</li> </ul>"},{"location":"lanelet2_rviz2/class_members/#g","title":"g","text":"<ul> <li>getMemberByRole (osm::Relation)</li> </ul>"},{"location":"lanelet2_rviz2/class_members/#i","title":"i","text":"<ul> <li>id (osm::Node, osm::Relation, osm::Way)</li> <li>id_ (osm::Node, osm::Relation, osm::Way)</li> </ul>"},{"location":"lanelet2_rviz2/class_members/#l","title":"l","text":"<ul> <li>line_width_ (OSMVisualizer)</li> <li>LaneletRelation (osm::LaneletRelation)</li> <li>left (osm::LaneletRelation, osm::Relation)</li> <li>left_ (osm::LaneletRelation, osm::Relation)</li> <li>location (osm::LaneletRelation, osm::Relation)</li> <li>location_ (osm::LaneletRelation, osm::Relation)</li> <li>lat (osm::Node)</li> <li>lat_ (osm::Node)</li> <li>local_x (osm::Node)</li> <li>local_x_ (osm::Node)</li> <li>local_y (osm::Node)</li> <li>local_y_ (osm::Node)</li> <li>lon (osm::Node)</li> <li>lon_ (osm::Node)</li> </ul>"},{"location":"lanelet2_rviz2/class_members/#m","title":"m","text":"<ul> <li>mapval (OSMVisualizer, osm::LaneletRelation)</li> <li>marker_array_relations_pub_ (OSMVisualizer)</li> <li>Map (osm::Map)</li> <li>metainfo_format_version (osm::Map)</li> <li>metainfo_map_version (osm::Map)</li> <li>MapElement (osm::MapElement)</li> <li>members (osm::Relation)</li> <li>members_ (osm::Relation)</li> </ul>"},{"location":"lanelet2_rviz2/class_members/#n","title":"n","text":"<ul> <li>nodes_ (OSMVisualizer, osm::Way)</li> <li>nodes (osm::Map, osm::Way)</li> <li>Node (osm::Node)</li> </ul>"},{"location":"lanelet2_rviz2/class_members/#o","title":"o","text":"<ul> <li>OSMVisualizer (OSMVisualizer)</li> <li>on_set_parameters_callback_handle_ (OSMVisualizer)</li> <li>one_way (osm::LaneletRelation, osm::Relation)</li> <li>one_way_ (osm::LaneletRelation, osm::Relation)</li> <li>operator= (osm::LaneletRelation, osm::Map, osm::MapElement, osm::Node, osm::Relation, osm::Way)</li> <li>osm_generator (osm::Map)</li> </ul>"},{"location":"lanelet2_rviz2/class_members/#p","title":"p","text":"<ul> <li>parametersCallback (OSMVisualizer)</li> <li>parseOSMFile (OSMVisualizer)</li> <li>publishMarkers (OSMVisualizer)</li> </ul>"},{"location":"lanelet2_rviz2/class_members/#r","title":"r","text":"<ul> <li>relations_ (OSMVisualizer)</li> <li>right (osm::LaneletRelation, osm::Relation)</li> <li>right_ (osm::LaneletRelation, osm::Relation)</li> <li>relations (osm::Map)</li> <li>Relation (osm::Relation)</li> <li>ref (osm::Relation::Member)</li> <li>role (osm::Relation::Member)</li> </ul>"},{"location":"lanelet2_rviz2/class_members/#s","title":"s","text":"<ul> <li>speed_color_max_ (OSMVisualizer)</li> <li>speed_limit (osm::LaneletRelation, osm::Relation)</li> <li>speed_limit_ (osm::LaneletRelation, osm::Relation)</li> <li>set_local_x (osm::Node)</li> <li>set_local_y (osm::Node)</li> <li>set_members (osm::Relation)</li> <li>subtype (osm::Relation)</li> <li>subtype_ (osm::Relation)</li> </ul>"},{"location":"lanelet2_rviz2/class_members/#t","title":"t","text":"<ul> <li>timer_ (OSMVisualizer)</li> <li>turn_direction (osm::LaneletRelation)</li> <li>turn_direction_ (osm::LaneletRelation)</li> <li>type (osm::Relation::Member, osm::Relation)</li> <li>tags (osm::Relation, osm::Way)</li> <li>tags_ (osm::Relation, osm::Way)</li> <li>type_ (osm::Relation)</li> </ul>"},{"location":"lanelet2_rviz2/class_members/#w","title":"w","text":"<ul> <li>ways_ (OSMVisualizer)</li> <li>ways (osm::Map)</li> <li>Way (osm::Way)</li> </ul>"},{"location":"lanelet2_rviz2/class_members/#x","title":"x","text":"<ul> <li>xml_encoding (osm::Map)</li> <li>xml_version (osm::Map)</li> </ul>"},{"location":"lanelet2_rviz2/class_members/#_1","title":"~","text":"<ul> <li>~LaneletRelation (osm::LaneletRelation)</li> <li>~Map (osm::Map)</li> <li>~MapElement (osm::MapElement)</li> <li>~Node (osm::Node)</li> <li>~Relation (osm::Relation)</li> <li>~Way (osm::Way)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_functions/","title":"Class Member Functions","text":""},{"location":"lanelet2_rviz2/class_member_functions/#a","title":"a","text":"<ul> <li>add_tag (osm::Relation, osm::Way)</li> <li>add_node (osm::Way)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_functions/#c","title":"c","text":"<ul> <li>centerCoordinates (OSMVisualizer)</li> <li>clearData (OSMVisualizer)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_functions/#d","title":"d","text":"<ul> <li>draw (osm::LaneletRelation, osm::MapElement, osm::Relation)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_functions/#e","title":"e","text":"<ul> <li>ele (osm::Node)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_functions/#g","title":"g","text":"<ul> <li>getMemberByRole (osm::Relation)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_functions/#i","title":"i","text":"<ul> <li>id (osm::Node, osm::Relation, osm::Way)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_functions/#l","title":"l","text":"<ul> <li>LaneletRelation (osm::LaneletRelation)</li> <li>left (osm::LaneletRelation, osm::Relation)</li> <li>location (osm::LaneletRelation, osm::Relation)</li> <li>lat (osm::Node)</li> <li>local_x (osm::Node)</li> <li>local_y (osm::Node)</li> <li>lon (osm::Node)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_functions/#m","title":"m","text":"<ul> <li>mapval (OSMVisualizer, osm::LaneletRelation)</li> <li>Map (osm::Map)</li> <li>MapElement (osm::MapElement)</li> <li>members (osm::Relation)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_functions/#n","title":"n","text":"<ul> <li>Node (osm::Node)</li> <li>nodes (osm::Way)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_functions/#o","title":"o","text":"<ul> <li>OSMVisualizer (OSMVisualizer)</li> <li>one_way (osm::LaneletRelation, osm::Relation)</li> <li>operator= (osm::LaneletRelation, osm::Map, osm::MapElement, osm::Node, osm::Relation, osm::Way)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_functions/#p","title":"p","text":"<ul> <li>parametersCallback (OSMVisualizer)</li> <li>parseOSMFile (OSMVisualizer)</li> <li>publishMarkers (OSMVisualizer)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_functions/#r","title":"r","text":"<ul> <li>right (osm::LaneletRelation, osm::Relation)</li> <li>Relation (osm::Relation)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_functions/#s","title":"s","text":"<ul> <li>speed_limit (osm::LaneletRelation, osm::Relation)</li> <li>set_local_x (osm::Node)</li> <li>set_local_y (osm::Node)</li> <li>set_members (osm::Relation)</li> <li>subtype (osm::Relation)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_functions/#t","title":"t","text":"<ul> <li>turn_direction (osm::LaneletRelation)</li> <li>tags (osm::Relation, osm::Way)</li> <li>type (osm::Relation)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_functions/#w","title":"w","text":"<ul> <li>Way (osm::Way)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_functions/#_1","title":"~","text":"<ul> <li>~LaneletRelation (osm::LaneletRelation)</li> <li>~Map (osm::Map)</li> <li>~MapElement (osm::MapElement)</li> <li>~Node (osm::Node)</li> <li>~Relation (osm::Relation)</li> <li>~Way (osm::Way)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_variables/","title":"Class Member Variables","text":""},{"location":"lanelet2_rviz2/class_member_variables/#c","title":"c","text":"<ul> <li>center_map_ (OSMVisualizer)</li> <li>center_x_ (OSMVisualizer)</li> <li>center_y_ (OSMVisualizer)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_variables/#d","title":"d","text":"<ul> <li>data_loaded_ (OSMVisualizer)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_variables/#e","title":"e","text":"<ul> <li>ele_ (osm::Node)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_variables/#f","title":"f","text":"<ul> <li>filename_ (OSMVisualizer)</li> <li>frame_id_ (OSMVisualizer)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_variables/#i","title":"i","text":"<ul> <li>id_ (osm::Node, osm::Relation, osm::Way)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_variables/#l","title":"l","text":"<ul> <li>line_width_ (OSMVisualizer)</li> <li>left_ (osm::LaneletRelation, osm::Relation)</li> <li>location_ (osm::LaneletRelation, osm::Relation)</li> <li>lat_ (osm::Node)</li> <li>local_x_ (osm::Node)</li> <li>local_y_ (osm::Node)</li> <li>lon_ (osm::Node)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_variables/#m","title":"m","text":"<ul> <li>marker_array_relations_pub_ (OSMVisualizer)</li> <li>metainfo_format_version (osm::Map)</li> <li>metainfo_map_version (osm::Map)</li> <li>members_ (osm::Relation)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_variables/#n","title":"n","text":"<ul> <li>nodes_ (OSMVisualizer, osm::Way)</li> <li>nodes (osm::Map)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_variables/#o","title":"o","text":"<ul> <li>on_set_parameters_callback_handle_ (OSMVisualizer)</li> <li>one_way_ (osm::LaneletRelation, osm::Relation)</li> <li>osm_generator (osm::Map)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_variables/#r","title":"r","text":"<ul> <li>relations_ (OSMVisualizer)</li> <li>right_ (osm::LaneletRelation, osm::Relation)</li> <li>relations (osm::Map)</li> <li>ref (osm::Relation::Member)</li> <li>role (osm::Relation::Member)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_variables/#s","title":"s","text":"<ul> <li>speed_color_max_ (OSMVisualizer)</li> <li>speed_limit_ (osm::LaneletRelation, osm::Relation)</li> <li>subtype_ (osm::Relation)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_variables/#t","title":"t","text":"<ul> <li>timer_ (OSMVisualizer)</li> <li>turn_direction_ (osm::LaneletRelation)</li> <li>type (osm::Relation::Member)</li> <li>tags_ (osm::Relation, osm::Way)</li> <li>type_ (osm::Relation)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_variables/#w","title":"w","text":"<ul> <li>ways_ (OSMVisualizer)</li> <li>ways (osm::Map)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_variables/#x","title":"x","text":"<ul> <li>xml_encoding (osm::Map)</li> <li>xml_version (osm::Map)</li> </ul>"},{"location":"lanelet2_rviz2/class_member_typedefs/","title":"Class Member Typedefs","text":"<p>Nothing related to Class Member Typedefs found.</p>"},{"location":"lanelet2_rviz2/class_member_enums/","title":"Class Member Enums","text":"<p>Nothing related to Class Member Enums found.</p>"},{"location":"lanelet2_rviz2/namespace_members/","title":"Namespace Members","text":"<p>Nothing related to Namespace Members found.</p>"},{"location":"lanelet2_rviz2/namespace_member_functions/","title":"Namespace Member Functions","text":"<p>Nothing related to Namespace Member Functions found.</p>"},{"location":"lanelet2_rviz2/namespace_member_variables/","title":"Namespace Member Variables","text":"<p>Nothing related to Namespace Member Variables found.</p>"},{"location":"lanelet2_rviz2/namespace_member_typedefs/","title":"Namespace Member Typedefs","text":"<p>Nothing related to Namespace Member Typedefs found.</p>"},{"location":"lanelet2_rviz2/namespace_member_enums/","title":"Namespace Member Enums","text":"<p>Nothing related to Namespace Member Enums found.</p>"},{"location":"lanelet2_rviz2/functions/","title":"Functions","text":""},{"location":"lanelet2_rviz2/functions/#m","title":"m","text":"<ul> <li>main (main.cpp)</li> </ul>"},{"location":"lanelet2_rviz2/functions/#t","title":"t","text":"<ul> <li>triangulatePolygon (triangulate_polygon.hpp)</li> </ul>"},{"location":"lanelet2_rviz2/macros/","title":"Macros","text":"<p>Nothing related to Macros found.</p>"},{"location":"lanelet2_rviz2/variables/","title":"Variables","text":""},{"location":"lanelet2_rviz2/variables/#i","title":"i","text":"<ul> <li>I64 (OSMVisualizer.hpp, node.hpp, oldrelation.hpp, way.hpp)</li> </ul>"},{"location":"lanelet2_rviz2/links/","title":"Links","text":"<ul> <li>Related Pages</li> <li>Modules</li> <li>Class List</li> <li>Namespace ListNamespace List</li> <li>Namespace Members</li> <li>Namespace Member Functions</li> <li>Namespace Member Variables</li> <li>Namespace Member Typedefs</li> <li>Namespace Member Enumerations</li> <li>Class Index</li> <li>Class Hierarchy</li> <li>Class Members</li> <li>Class Member Functions</li> <li>Class Member Variables</li> <li>Class Member Typedefs</li> <li>Class Member Enumerations</li> <li>Files</li> <li>File Variables</li> <li>File Functions</li> <li>File Macros</li> </ul>"}]}